% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extractCorrelationScores.R
\name{extractCorrelationScores}
\alias{extractCorrelationScores}
\title{Extract sample-level correlation scores}
\usage{
extractCorrelationScores(
  epiSignal,
  gRanges,
  clustList,
  method = c("deltaSLE", "Delaneau"),
  method.corr = c("pearson", "kendall", "spearman"),
  BPPARAM = bpparam(),
  rho = 0.1,
  sumabs = 1
)
}
\arguments{
\item{epiSignal}{matrix or EList of epigentic signal.  Rows are features and columns are samples}

\item{gRanges}{GenomciRanges corresponding to the rows of epiSignal}

\item{clustList}{list of cluster assignments}

\item{method}{"deltaSLE", "Delaneau"}

\item{method.corr}{Specify type of correlation: "pearson", "kendall", "spearman"}

\item{BPPARAM}{parameters for parallel evaluation}

\item{rho}{used only for sle.score(). A positive constant such that cor(Y) + diag(rep(rho,p)) is positive definite.  See sLED::sLED()}

\item{sumabs}{used only for sle.score(). regularization paramter. Value of 1 gives no regularization, sumabs*sqrt(p) is the upperbound of the L_1 norm of v, controlling the sparsity of solution. Must be between 1/sqrt(p) and 1. See sLED::sLED()}
}
\value{
matrix of scores of each sample for each cluster
}
\description{
Extract sample-level correlation scores for each cluster
}
\examples{
library(GenomicRanges)

# load data
data('decorateData')

# Evaluate hierarchical clustering
# adjacentCount is the number of adjacent peaks considered in correlation
treeList = runOrderedClusteringGenome( simData, simLocation)

# Choose cutoffs and return cluster
treeListClusters = createClusters( treeList, method = "meanClusterSize", meanClusterSize=c( 10, 20, 30, 40, 50) )

# Evaluate strength of correlation for each cluster
clstScore = scoreClusters(treeList, treeListClusters )

# Filter to retain only strong clusters
clustInclude = retainClusters( clstScore, "LEF", 0.30 )

# get retained clusters
treeListClusters_filter = filterClusters( treeListClusters, clustInclude)

# collapse similar clusters
treeListClusters_collapse = collapseClusters( treeListClusters_filter, simLocation)

# get correlation scores for each sample for each cluster
corScores = extractCorrelationScores( simData, simLocation, treeListClusters_collapse )

}
\seealso{
sle.score delaneau.score
}
