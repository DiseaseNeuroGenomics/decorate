[{"path":"http://gabrielhoffman.github.io/decorrelate/articles/decorate.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"decorate: Differential Epigenetic Correlation Test","text":"Data normalization covariate correction assume already perform using standard methods assay decorate run residuals removing effects confounding variables Compute correlations local pairs features runOrderedClusteringGenome() Perform hierarchical clustering features built runOrderedClusteringGenome() Produce discrete clusters features createClusters(): can take multiple parameter values return multiple sets clusters different resolutions Filter clusters scoreClusters(): evaluate strength correlation structure cluster retainClusters(): identify clusters pass cutoff strength correlation structure. default filters LEF, lead eigen-value fraction, fraction variance explained first eigen-value. Higher LEF values indicate stronger correlation structure. filterClusters(): apply filter clusters based cutoff collapseClusters(): Collapse redundant clusters identified using multiple parameter values step (3). Redundancy two clusters evaluated using Jaccard index, fraction epigenetic features shared two clusters. Statistical test differential correlation evalDiffCorr(): implements 16 tests differential correlation different properties. See comparison methods. recommend ‘Box.permute’, ‘deltaSLE’, ‘sLED’ retain power controlling false positive rate merge results one data.frame combineResults() plotDecorate(): plot local correlation structure, clusters features genes region plotCompareCorr(): plot correlation structure two subsets data plotScatterPairs(): scatter plot pair features two subsets data","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/articles/decorate.html","id":"analysis-of-simulated-data","dir":"Articles","previous_headings":"","what":"Analysis of simulated data","title":"decorate: Differential Epigenetic Correlation Test","text":"","code":"library(decorate) library(GenomicRanges) library(cowplot)      library(limma)       # load data data('decorateData')  # Compute residuals with respect to variable of interested plus confounders design = model.matrix(~ Disease, metadata) fit = lmFit(simData, design) residValues = residuals( fit, simData)  # Evaluate hierarchical clustering # adjacentCount is the number of adjacent peaks considered in correlation # use Spearman correlation to reduce the effects of outliers treeList = runOrderedClusteringGenome( residValues, simLocation, adjacentCount=500, method.corr=\"spearman\" )  # Choose cutoffs and return clusters using multiple values for meanClusterSize  # Clusters corresponding to each parameter value are returned  # and then processed downstream # By using multiple parameter values, epigenetic features are included in clusters  # at different resolutions treeListClusters = createClusters( treeList, method = \"meanClusterSize\", meanClusterSize=c(20, 30, 40, 50) )  # Evaluate strength of correlation for each cluster clstScore = scoreClusters(treeList, treeListClusters )  # Filter to retain only strong clusters # If lead eigen value fraction (LEF) > 30% then keep clusters # LEF is the fraction of variance explained by the first eigen-value clustInclude = retainClusters( clstScore, \"LEF\", 0.15 )  # get retained clusters treeListClusters_filter = filterClusters( treeListClusters, clustInclude)  # collapse redundant clusters treeListClusters_collapse = collapseClusters( treeListClusters_filter, simLocation, jaccardCutoff=0.9)  # Plot correlations and clusters in region defind by query # get single entry giving range of the region query = range(simLocation)"},{"path":"http://gabrielhoffman.github.io/decorrelate/articles/decorate.html","id":"summary-of-clustering","dir":"Articles","previous_headings":"Analysis of simulated data","what":"Summary of clustering","title":"decorate: Differential Epigenetic Correlation Test","text":"Number cluster parameters: 4 meanClusterSize = c(20, 30, 40, 50) Number total clusters: 57 treeListClusters Number clusters filtering: 56 treeListClusters_filter Number clusters collapsing: 29 treeListClusters_collapse","code":""},{"path":[]},{"path":"http://gabrielhoffman.github.io/decorrelate/articles/decorate.html","id":"evaluate-correlation-structure-versus-distance","dir":"Articles","previous_headings":"Analysis of simulated data > Make plots","what":"Evaluate correlation structure versus distance","title":"decorate: Differential Epigenetic Correlation Test","text":"","code":"dfDist = evaluateCorrDecay( treeList, simLocation, verbose=FALSE)  plotCorrDecay( dfDist, outlierQuantile=1e-5 )"},{"path":[]},{"path":"http://gabrielhoffman.github.io/decorrelate/articles/decorate.html","id":"load-gene-database","dir":"Articles","previous_headings":"Plot correlation structure along genome","what":"Load gene database","title":"decorate: Differential Epigenetic Correlation Test","text":"","code":"# load gene locations # this is ENSEMBL v86 from the hg38 assembly # but other versions and assemblies are available library(EnsDb.Hsapiens.v86) ## Loading required package: ensembldb ## Loading required package: GenomicFeatures ## Loading required package: AnnotationDbi ## Loading required package: AnnotationFilter ##  ## Attaching package: 'ensembldb' ## The following object is masked from 'package:stats': ##  ##     filter fig1 = plotDecorate( ensdb, treeList, treeListClusters, simLocation, query) fig2 = plotDecorate( ensdb, treeList, treeListClusters_filter, simLocation, query) plot_grid( fig1, fig2, ncol=2, labels=c('A: All clusters', 'B: After filtering') )"},{"path":"http://gabrielhoffman.github.io/decorrelate/articles/decorate.html","id":"plot-after-filtering-and-collapsing-redundant-clusters","dir":"Articles","previous_headings":"Plot correlation structure along genome","what":"Plot after filtering and collapsing redundant clusters","title":"decorate: Differential Epigenetic Correlation Test","text":"","code":"fig = plotDecorate( ensdb, treeList, treeListClusters_collapse, simLocation, query) plot_grid( fig, ncol=1, labels=c('C: After collapsing clusters'), hjust=0 )"},{"path":"http://gabrielhoffman.github.io/decorrelate/articles/decorate.html","id":"run-test-of-differential-correlation-using-sled","dir":"Articles","previous_headings":"Plot correlation structure along genome > Plot after filtering and collapsing redundant clusters","what":"Run test of differential correlation using sLED","title":"decorate: Differential Epigenetic Correlation Test","text":"Evaluate treeListClusters_collapse, filtered collapsed set clusters id column gives clustering parameter runOrderedClusteringGenome(), cluster 6 id 10 different cluster 6 id 50.  Combine results merge properties cluster single data.frame Note permutations used test 'sLED', set zero others.","code":"library(BiocParallel) register(SnowParam(4, progressbar=TRUE))  # Evaluate Differential Correlation between two subsets of data # Use Spearman correlation to reduce the effect of outliers resDiffCorr = evalDiffCorr( residValues, metadata$Disease, simLocation,    treeListClusters_collapse, method='deltaSLE',  method.corr=\"spearman\")  # get summary of results df = summary( resDiffCorr )  # print results head(df) ##   id chrom cluster       pValue          stat n.perm     p.adjust ## 1 40 chr20       2 3.984297e-05  0.0011542191      0 0.0009562313 ## 2 30 chr20       3 9.300193e-04  0.0007217765      0 0.0111602311 ## 3 20 chr20       4 6.301672e-03  0.0004177436      0 0.0504133770 ## 4 20 chr20       7 2.746754e-02  0.0004020404      0 0.1648052448 ## 5 40 chr20       9 7.185602e-02 -0.0001746903      0 0.3449089171 ## 6 20 chr20       6 9.529629e-02  0.0004449277      0 0.3811851459 df_results = combineResults( resDiffCorr, clstScore, treeListClusters, simLocation) head(df_results) ##   id chrom cluster       pValue          stat n.perm     p.adjust  N ## 1 40 chr20       2 3.984297e-05  0.0011542191      0 0.0009562313 12 ## 2 30 chr20       3 9.300193e-04  0.0007217765      0 0.0111602311  9 ## 3 20 chr20       4 6.301672e-03  0.0004177436      0 0.0504133770  6 ## 4 20 chr20       7 2.746754e-02  0.0004020404      0 0.1648052448 26 ## 5 40 chr20       9 7.185602e-02 -0.0001746903      0 0.3449089171 13 ## 6 20 chr20       6 9.529629e-02  0.0004449277      0 0.3811851459 13 ##   mean_abs_corr quantile75 quantile90 quantile95       LEF    start      end ## 1     0.1875826  0.2148852  0.2366822  0.2484625 0.1703609 62065457 62067875 ## 2     0.1843397  0.2106810  0.2366822  0.2473400 0.1941585 62066063 62067875 ## 3     0.2106171  0.2260056  0.2481257  0.2549663 0.2545741 62066417 62067325 ## 4     0.3702191  0.4085017  0.4338798  0.4433801 0.2175939 62071328 62078427 ## 5     0.3330685  0.3826729  0.4064634  0.4214374 0.2323639 62146651 62149161 ## 6     0.3092056  0.3520966  0.3790616  0.4096076 0.2208019 62068330 62071263 ##   width ## 1  2419 ## 2  1813 ## 3   909 ## 4  7100 ## 5  2511 ## 6  2934"},{"path":"http://gabrielhoffman.github.io/decorrelate/articles/decorate.html","id":"summary-of-cluster-properties","dir":"Articles","previous_headings":"Plot correlation structure along genome > Plot after filtering and collapsing redundant clusters","what":"Summary of cluster properties","title":"decorate: Differential Epigenetic Correlation Test","text":"","code":"# Histogram of LEF ggplot(df_results, aes(LEF, fill=id)) + geom_histogram(alpha=0.7) +    theme_bw(17) + xlim(0,1) +    theme(aspect.ratio=1, legend.position=\"bottom\",      plot.title = element_text(hjust = 0.5)) +      scale_fill_discrete(name = \"Requested mean cluster size\") +      xlab(\"Lead eigenvalue fraction (LEF)\") + ggtitle(\"Summarize LEF\") # Histogram of mean absolute correlation ggplot(df_results, aes(mean_abs_corr, fill=id)) + geom_histogram(alpha=0.7) + theme_bw(17) + xlim(0,1) +    theme(aspect.ratio=1, legend.position=\"bottom\",      plot.title = element_text(hjust = 0.5)) +      scale_fill_discrete(name = \"Requested mean cluster size\") +      xlab(\"Mean absolute correlation\") +      ggtitle(\"Summarize absolute correlation\") # Boxplot of number of features per cluster ggplot(df_results, aes(id, N, fill=id)) + geom_boxplot() +    theme_bw(17) +    theme(aspect.ratio=1, legend.position=\"bottom\",      plot.title = element_text(hjust = 0.5)) +    scale_fill_discrete(name = \"Feature per cluster\") +    xlab(\"Requested mean cluster size\") +    ylab(\"Number of features\") +    ggtitle(\"Summarize feature per cluster\") +    coord_flip()"},{"path":"http://gabrielhoffman.github.io/decorrelate/articles/decorate.html","id":"compare-correlation-structure-in-two-subsets-of-the-data","dir":"Articles","previous_headings":"Plot correlation structure along genome > Plot after filtering and collapsing redundant clusters","what":"Compare correlation structure in two subsets of the data","title":"decorate: Differential Epigenetic Correlation Test","text":"","code":"# extract feature identifiers from most significant cluster peakIDs = getFeaturesInCluster( treeListClusters_collapse, df_results$chrom[1], df_results$cluster[1], df_results$id[1])  query = range(simLocation[names(simLocation) %in% peakIDs])  locText = with( data.frame(query), paste0(seqnames, ':', format(start, big.mark=','), '-', format(end, big.mark=',')))  # plot comparison of correlation matrices for peaks in peakIDs #  where data is subset by metadata$Disease main = paste0(df$chrom[1], ': cluster ', df$cluster[1], '\\n', locText)    plotCompareCorr( residValues, peakIDs, metadata$Disease) + ggtitle(main)"},{"path":"http://gabrielhoffman.github.io/decorrelate/articles/decorate.html","id":"compare-correlation-structure-along-genome","dir":"Articles","previous_headings":"Plot correlation structure along genome > Plot after filtering and collapsing redundant clusters","what":"Compare correlation structure along genome","title":"decorate: Differential Epigenetic Correlation Test","text":"First, plot correlation structure controls (metadata$Disease==0). , plot correlation structure cases (metadata$Disease==1). cluster located chr20:62,065,457-62,067,875 p-value 3.984e-05 test statistic 0.00115.","code":"# get location of peaks in this cluster   query = range(simLocation[names(simLocation) %in% peakIDs])  # expand window to include adjacent clusters window = 2000  start(query) = start(query) - window end(query) = end(query) + window  fig1 = plotDecorate( ensdb, treeList, treeListClusters_collapse, simLocation, query, data=residValues[,metadata$Disease==0])  fig2 = plotDecorate( ensdb, treeList, treeListClusters_collapse, simLocation, query, data=residValues[,metadata$Disease==1]) plot_grid( fig1, fig2, ncol=2, labels=c('A: Contols (i.e. Disease==0)', 'B: Cases (i.e. Disease==1)') )"},{"path":"http://gabrielhoffman.github.io/decorrelate/articles/decorate.html","id":"pairwise-scatter-plots","dir":"Articles","previous_headings":"Plot correlation structure along genome > Plot after filtering and collapsing redundant clusters","what":"Pairwise scatter plots","title":"decorate: Differential Epigenetic Correlation Test","text":"pairs features significant cluster, make scatterplot cases controls seperately.","code":"plotScatterPairs( residValues, peakIDs, metadata$Disease) + ggtitle(main)"},{"path":"http://gabrielhoffman.github.io/decorrelate/articles/decorate_example.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"decorate: Differential Epigenetic Correlation Test","text":"Data normalization covariate correction assume already perform using standard methods assay decorate run residuals removing effects confounding variables Compute correlations local pairs features runOrderedClusteringGenome() Perform hierarchical clustering features built runOrderedClusteringGenome() Produce discrete clusters features createClusters(): can take multiple parameter values return multiple sets clusters different resolutions Filter clusters scoreClusters(): evaluate strength correlation structure cluster retainClusters(): identify clusters pass cutoff strength correlation structure. default filters LEF, lead eigen-value fraction, fraction variance explained first eigen-value. Higher LEF values indicate stronger correlation structure. filterClusters(): apply filter clusters based cutoff collapseClusters(): Collapse redundant clusters identified using multiple parameter values step (3). Redundancy two clusters evaluated using Jaccard index, fraction epigenetic features shared two clusters. Statistical test differential correlation evalDiffCorr(): implements 16 tests differential correlation different properties. See comparison methods. recommend ‘Box.permute’, ‘deltaSLE’, ‘sLED’ retain power controlling false positive rate merge results one data.frame combineResults() plotDecorate(): plot local correlation structure, clusters features genes region plotCompareCorr(): plot correlation structure two subsets data plotScatterPairs(): scatter plot pair features two subsets data","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/articles/decorate_example.html","id":"analysis-of-simulated-data","dir":"Articles","previous_headings":"","what":"Analysis of simulated data","title":"decorate: Differential Epigenetic Correlation Test","text":"","code":"library(decorate) library(GenomicRanges) library(cowplot)      library(limma)       # load data data('decorateData')  # Compute residuals with respect to variable of interested plus confounders design = model.matrix(~ Disease, metadata) fit = lmFit(simData, design) residValues = residuals( fit, simData)  # Evaluate hierarchical clustering # adjacentCount is the number of adjacent peaks considered in correlation # use Spearman correlation to reduce the effects of outliers treeList = runOrderedClusteringGenome( residValues, simLocation, adjacentCount=500, method.corr=\"spearman\" )  # Choose cutoffs and return clusters using multiple values for meanClusterSize  # Clusters corresponding to each parameter value are returned  # and then processed downstream # By using multiple parameter values, epigenetic features are included in clusters  # at different resolutions treeListClusters = createClusters( treeList, method = \"meanClusterSize\", meanClusterSize=c(20, 30, 40, 50) )  # Evaluate strength of correlation for each cluster clstScore = scoreClusters(treeList, treeListClusters )  # Filter to retain only strong clusters # If lead eigen value fraction (LEF) > 30% then keep clusters # LEF is the fraction of variance explained by the first eigen-value clustInclude = retainClusters( clstScore, \"LEF\", 0.15 )  # get retained clusters treeListClusters_filter = filterClusters( treeListClusters, clustInclude)  # collapse redundant clusters treeListClusters_collapse = collapseClusters( treeListClusters_filter, simLocation, jaccardCutoff=0.9)  # Plot correlations and clusters in region defind by query # get single entry giving range of the region query = range(simLocation)"},{"path":"http://gabrielhoffman.github.io/decorrelate/articles/decorate_example.html","id":"summary-of-clustering","dir":"Articles","previous_headings":"Analysis of simulated data","what":"Summary of clustering","title":"decorate: Differential Epigenetic Correlation Test","text":"Number cluster parameters: 4 meanClusterSize = c(20, 30, 40, 50) Number total clusters: 57 treeListClusters Number clusters filtering: 56 treeListClusters_filter Number clusters collapsing: 29 treeListClusters_collapse","code":""},{"path":[]},{"path":"http://gabrielhoffman.github.io/decorrelate/articles/decorate_example.html","id":"evaluate-correlation-structure-versus-distance","dir":"Articles","previous_headings":"Analysis of simulated data > Make plots","what":"Evaluate correlation structure versus distance","title":"decorate: Differential Epigenetic Correlation Test","text":"","code":"dfDist = evaluateCorrDecay( treeList, simLocation, verbose=FALSE)  plotCorrDecay( dfDist, outlierQuantile=1e-5 )"},{"path":[]},{"path":"http://gabrielhoffman.github.io/decorrelate/articles/decorate_example.html","id":"load-gene-database","dir":"Articles","previous_headings":"Plot correlation structure along genome","what":"Load gene database","title":"decorate: Differential Epigenetic Correlation Test","text":"","code":"# load gene locations # this is ENSEMBL v86 from the hg38 assembly # but other versions and assemblies are available library(EnsDb.Hsapiens.v86) fig1 = plotDecorate( ensdb, treeList, treeListClusters, simLocation, query) fig2 = plotDecorate( ensdb, treeList, treeListClusters_filter, simLocation, query) plot_grid( fig1, fig2, ncol=2, labels=c('A: All clusters', 'B: After filtering') )"},{"path":"http://gabrielhoffman.github.io/decorrelate/articles/decorate_example.html","id":"plot-after-filtering-and-collapsing-redundant-clusters","dir":"Articles","previous_headings":"Plot correlation structure along genome","what":"Plot after filtering and collapsing redundant clusters","title":"decorate: Differential Epigenetic Correlation Test","text":"","code":"fig = plotDecorate( ensdb, treeList, treeListClusters_collapse, simLocation, query) plot_grid( fig, ncol=1, labels=c('C: After collapsing clusters'), hjust=0 )"},{"path":"http://gabrielhoffman.github.io/decorrelate/articles/decorate_example.html","id":"run-test-of-differential-correlation-using-sled","dir":"Articles","previous_headings":"Plot correlation structure along genome > Plot after filtering and collapsing redundant clusters","what":"Run test of differential correlation using sLED","title":"decorate: Differential Epigenetic Correlation Test","text":"Evaluate treeListClusters_collapse, filtered collapsed set clusters id column gives clustering parameter runOrderedClusteringGenome(), cluster 6 id 10 different cluster 6 id 50.  Combine results merge properties cluster single data.frame Note permutations used test 'sLED', set zero others.","code":"library(BiocParallel) register(SnowParam(4, progressbar=TRUE))  # Evaluate Differential Correlation between two subsets of data # Use Spearman correlation to reduce the effect of outliers resDiffCorr = evalDiffCorr( residValues, metadata$Disease, simLocation,    treeListClusters_collapse, method='deltaSLE',  method.corr=\"spearman\")  # get summary of results df = summary( resDiffCorr )  # print results head(df) ##   id chrom cluster       pValue          stat n.perm     p.adjust ## 1 40 chr20       2 3.984297e-05  0.0011542191      0 0.0009562313 ## 2 30 chr20       3 9.300193e-04  0.0007217765      0 0.0111602311 ## 3 20 chr20       4 6.301672e-03  0.0004177436      0 0.0504133770 ## 4 20 chr20       7 2.746754e-02  0.0004020404      0 0.1648052448 ## 5 40 chr20       9 7.185602e-02 -0.0001746903      0 0.3449089171 ## 6 20 chr20       6 9.529629e-02  0.0004449277      0 0.3811851459 df_results = combineResults( resDiffCorr, clstScore, treeListClusters, simLocation) head(df_results) ##   id chrom cluster       pValue          stat n.perm     p.adjust  N ## 1 40 chr20       2 3.984297e-05  0.0011542191      0 0.0009562313 12 ## 2 30 chr20       3 9.300193e-04  0.0007217765      0 0.0111602311  9 ## 3 20 chr20       4 6.301672e-03  0.0004177436      0 0.0504133770  6 ## 4 20 chr20       7 2.746754e-02  0.0004020404      0 0.1648052448 26 ## 5 40 chr20       9 7.185602e-02 -0.0001746903      0 0.3449089171 13 ## 6 20 chr20       6 9.529629e-02  0.0004449277      0 0.3811851459 13 ##   mean_abs_corr quantile75 quantile90 quantile95       LEF    start      end ## 1     0.1875826  0.2148852  0.2366822  0.2484625 0.1703609 62065457 62067875 ## 2     0.1843397  0.2106810  0.2366822  0.2473400 0.1941585 62066063 62067875 ## 3     0.2106171  0.2260056  0.2481257  0.2549663 0.2545741 62066417 62067325 ## 4     0.3702191  0.4085017  0.4338798  0.4433801 0.2175939 62071328 62078427 ## 5     0.3330685  0.3826729  0.4064634  0.4214374 0.2323639 62146651 62149161 ## 6     0.3092056  0.3520966  0.3790616  0.4096076 0.2208019 62068330 62071263 ##   width ## 1  2419 ## 2  1813 ## 3   909 ## 4  7100 ## 5  2511 ## 6  2934"},{"path":"http://gabrielhoffman.github.io/decorrelate/articles/decorate_example.html","id":"summary-of-cluster-properties","dir":"Articles","previous_headings":"Plot correlation structure along genome > Plot after filtering and collapsing redundant clusters","what":"Summary of cluster properties","title":"decorate: Differential Epigenetic Correlation Test","text":"","code":"# Histogram of LEF ggplot(df_results, aes(LEF, fill=id)) + geom_histogram(alpha=0.7) +    theme_bw(17) + xlim(0,1) +    theme(aspect.ratio=1, legend.position=\"bottom\",      plot.title = element_text(hjust = 0.5)) +      scale_fill_discrete(name = \"Requested mean cluster size\") +      xlab(\"Lead eigenvalue fraction (LEF)\") + ggtitle(\"Summarize LEF\") # Histogram of mean absolute correlation ggplot(df_results, aes(mean_abs_corr, fill=id)) + geom_histogram(alpha=0.7) + theme_bw(17) + xlim(0,1) +    theme(aspect.ratio=1, legend.position=\"bottom\",      plot.title = element_text(hjust = 0.5)) +      scale_fill_discrete(name = \"Requested mean cluster size\") +      xlab(\"Mean absolute correlation\") +      ggtitle(\"Summarize absolute correlation\") # Boxplot of number of features per cluster ggplot(df_results, aes(id, N, fill=id)) + geom_boxplot() +    theme_bw(17) +    theme(aspect.ratio=1, legend.position=\"bottom\",      plot.title = element_text(hjust = 0.5)) +    scale_fill_discrete(name = \"Feature per cluster\") +    xlab(\"Requested mean cluster size\") +    ylab(\"Number of features\") +    ggtitle(\"Summarize feature per cluster\") +    coord_flip()"},{"path":"http://gabrielhoffman.github.io/decorrelate/articles/decorate_example.html","id":"compare-correlation-structure-in-two-subsets-of-the-data","dir":"Articles","previous_headings":"Plot correlation structure along genome > Plot after filtering and collapsing redundant clusters","what":"Compare correlation structure in two subsets of the data","title":"decorate: Differential Epigenetic Correlation Test","text":"","code":"# extract feature identifiers from most significant cluster peakIDs = getFeaturesInCluster( treeListClusters_collapse, df_results$chrom[1], df_results$cluster[1], df_results$id[1])  query = range(simLocation[names(simLocation) %in% peakIDs])  locText = with( data.frame(query), paste0(seqnames, ':', format(start, big.mark=','), '-', format(end, big.mark=',')))  # plot comparison of correlation matrices for peaks in peakIDs #  where data is subset by metadata$Disease main = paste0(df$chrom[1], ': cluster ', df$cluster[1], '\\n', locText)    plotCompareCorr( residValues, peakIDs, metadata$Disease) + ggtitle(main)"},{"path":"http://gabrielhoffman.github.io/decorrelate/articles/decorate_example.html","id":"compare-correlation-structure-along-genome","dir":"Articles","previous_headings":"Plot correlation structure along genome > Plot after filtering and collapsing redundant clusters","what":"Compare correlation structure along genome","title":"decorate: Differential Epigenetic Correlation Test","text":"First, plot correlation structure controls (metadata$Disease==0). , plot correlation structure cases (metadata$Disease==1). cluster located chr20:62,065,457-62,067,875 p-value 3.984e-05 test statistic 0.00115.","code":"# get location of peaks in this cluster   query = range(simLocation[names(simLocation) %in% peakIDs])  # expand window to include adjacent clusters window = 2000  start(query) = start(query) - window end(query) = end(query) + window  fig1 = plotDecorate( ensdb, treeList, treeListClusters_collapse, simLocation, query, data=residValues[,metadata$Disease==0])  fig2 = plotDecorate( ensdb, treeList, treeListClusters_collapse, simLocation, query, data=residValues[,metadata$Disease==1]) plot_grid( fig1, fig2, ncol=2, labels=c('A: Contols (i.e. Disease==0)', 'B: Cases (i.e. Disease==1)') )"},{"path":"http://gabrielhoffman.github.io/decorrelate/articles/decorate_example.html","id":"pairwise-scatter-plots","dir":"Articles","previous_headings":"Plot correlation structure along genome > Plot after filtering and collapsing redundant clusters","what":"Pairwise scatter plots","title":"decorate: Differential Epigenetic Correlation Test","text":"pairs features significant cluster, make scatterplot cases controls seperately.","code":"plotScatterPairs( residValues, peakIDs, metadata$Disease) + ggtitle(main)"},{"path":"http://gabrielhoffman.github.io/decorrelate/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gabriel Hoffman. Author, maintainer.","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hoffman GE, Bendl J, Girdhar K, Roussos P (2020). decorate: differential epigenetic correlation test. Bioinformatics, 36(9):2856–2861, doi:10.1093/bioinformatics/btaa067","code":"@Article{,   title = {decorate: differential epigenetic correlation test},   author = {Gabriel E. Hoffman and Jaroslav Bendl and Kiran Girdhar and Panos Roussos},   year = {2020},   journal = {Bioinformatics},   doi = {10.1093/bioinformatics/btaa067},   volume = {36},   issue = {9},   pages = {2856–2861}, }"},{"path":[]},{"path":"http://gabrielhoffman.github.io/decorrelate/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Differential Epigenetic Coregulation Test","text":"","code":"library(devtools)  # Install decorate #   first, check for Bioconductor if (!requireNamespace(\"BiocManager\", quietly = TRUE)){     cat(\"Please install Bioconductor before continuing:\\n\")     cat(\"see http://bioconductor.org/install/\\n\\n\") }else{     install_github('GabrielHoffman/decorate', repos=BiocManager::repositories()) }"},{"path":"http://gabrielhoffman.github.io/decorrelate/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Differential Epigenetic Coregulation Test","text":"Depending system, may need install system dependencies first: udunits proj gdal geos","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/index.html","id":"mac-os-x","dir":"","previous_headings":"","what":"Differential Epigenetic Coregulation Test","title":"Differential Epigenetic Coregulation Test","text":"","code":"brew install udunits proj gdal geos"},{"path":"http://gabrielhoffman.github.io/decorrelate/index.html","id":"ubuntu","dir":"","previous_headings":"","what":"Differential Epigenetic Coregulation Test","title":"Differential Epigenetic Coregulation Test","text":"","code":"apt-get install libudunits2-dev libproj-dev proj-data proj-bin libgeos-dev libgeos-c1v5 libgdal-dev"},{"path":"http://gabrielhoffman.github.io/decorrelate/index.html","id":"centos","dir":"","previous_headings":"","what":"Differential Epigenetic Coregulation Test","title":"Differential Epigenetic Coregulation Test","text":"","code":"yum install udunits2-devel yum install proj-devel yum install gdal-devel yum install geos-devel"},{"path":"http://gabrielhoffman.github.io/decorrelate/index.html","id":"windows","dir":"","previous_headings":"","what":"Differential Epigenetic Coregulation Test","title":"Differential Epigenetic Coregulation Test","text":"decorate install Windows without needing install dependencies.","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/index.html","id":"data-analysis-from-manuscript","dir":"","previous_headings":"","what":"Data analysis from manuscript","title":"Differential Epigenetic Coregulation Test","text":"DNA methylation kidney renal clear cell carcinoma DNA methylation schizophrenia brains ATAC-seq schizophrenia brains Histone modification ChIP-seq human brain","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/index.html","id":"simulations-and-properties-of-methods","dir":"","previous_headings":"","what":"Simulations and properties of methods","title":"Differential Epigenetic Coregulation Test","text":"Simulations Results files Analysis code","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/boxM.html","id":null,"dir":"Reference","previous_headings":"","what":"Box's M-test — boxM","title":"Box's M-test — boxM","text":"Box's M-test","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/boxM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Box's M-test — boxM","text":"","code":"boxM(   Y,   group,   tol = 1e-10,   fxn = cor,   method = c(\"pearson\", \"kendall\", \"spearman\") )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/boxM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Box's M-test — boxM","text":"Y response matrix group factor defining groups tol tolerance eigen values fxn define function.  default cor compare correlation structure.  Use cov compare covariance structure like  heplots::boxM method specify correlation method: \"pearson\", \"kendall\" \"spearman\"","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/boxM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Box's M-test — boxM","text":"","code":"data(iris)  boxM( iris[,1:4], iris[,5]) #>  #> \tBox's M-test for Homogeneity of Covariance Matrices #>  #> data:  iris[, 1:4] #> Chi-Sq (approx.) = 73.184, df = 20, p-value = 5.456e-08 #>"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/boxM_fast.html","id":null,"dir":"Reference","previous_headings":"","what":"Box's M-test — boxM_fast","title":"Box's M-test — boxM_fast","text":"boxM performs Box's (1949) M-test homogeneity covariance matrices obtained multivariate normal data according one classification factors. test compares  product log determinants separate covariance  matrices log determinant pooled covariance matrix,    analogous likelihood ratio test. test statistic uses chi-square approximation. Uses permutations estimate degrees freedom null","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/boxM_fast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Box's M-test — boxM_fast","text":"","code":"boxM_fast(Y, group, method = c(\"pearson\", \"spearman\"))"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/boxM_fast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Box's M-test — boxM_fast","text":"Y response variable matrix group factor defining groups, number entries must equal nrow(Y) method Specify type correlation: \"pearson\", \"spearman\"","code":""},{"path":[]},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/boxM_fast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Box's M-test — boxM_fast","text":"","code":"data(iris)  boxM_fast( as.matrix(iris[, 1:4]), iris[, \"Species\"]) #> $Si_logDet #>           [,1] #> [1,] -1.040269 #> [2,] -2.481781 #> [3,] -1.984930 #>  #> $dfs #>      [,1] #> [1,]   49 #> [2,]   49 #> [3,]   49 #>  #> $dfchi #> [1] 20 #>  #> $pval #> [1] 5.455647e-08 #>  #> $X2 #> [1] 73.1845 #>  #> $logdet #> [1] -1.040269 -2.481781 -1.984930 #>  #> $stat_logdet #> [1] NA #>"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/boxM_permute.html","id":null,"dir":"Reference","previous_headings":"","what":"Box's M-test — boxM_permute","title":"Box's M-test — boxM_permute","text":"boxM performs Box's (1949) M-test homogeneity covariance matrices obtained multivariate normal data according one classification factors. test compares  product log determinants separate covariance  matrices log determinant pooled covariance matrix,    analogous likelihood ratio test. test statistic uses chi-square approximation. Uses permutations estimate degrees freedom null","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/boxM_permute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Box's M-test — boxM_permute","text":"","code":"boxM_permute(   Y,   group,   nperm = 200,   method = c(\"pearson\", \"kendall\", \"spearman\") )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/boxM_permute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Box's M-test — boxM_permute","text":"Y response variable matrix group factor defining groups, continuous variable, number entries must equal nrow(Y) nperm number permutations group variable used estimate degrees freedom null method Specify type correlation: \"pearson\", \"kendall\", \"spearman\"","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/boxM_permute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Box's M-test — boxM_permute","text":"list p.value, test statistic, df.approx estimated permutation","code":""},{"path":[]},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/boxM_permute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Box's M-test — boxM_permute","text":"","code":"data(iris)  boxM_permute(iris[, 1:4], iris[, \"Species\"]) #> $p.value #> [1] 3.934462e-09 #>  #> $statistic #> NULL #>  #> $df.approx #> [1] 16.44965 #>  #> $stat_logdet #> [1] NA #>"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/collapseClusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse clusters based on jaccard index — collapseClusters","title":"Collapse clusters based on jaccard index — collapseClusters","text":"Collapse clusters jaccard index clusters exceeds cutoff","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/collapseClusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse clusters based on jaccard index — collapseClusters","text":"","code":"collapseClusters(treeListClusters, featurePositions, jaccardCutoff = 0.9)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/collapseClusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse clusters based on jaccard index — collapseClusters","text":"treeListClusters createClusters() featurePositions GRanges object storing location feature jaccardCutoff cutoff value jaccard index","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/collapseClusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse clusters based on jaccard index — collapseClusters","text":"subset clusters treeListClusters passes cutoff","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/collapseClusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse clusters based on jaccard index — collapseClusters","text":"","code":"library(GenomicRanges) #> Loading required package: stats4 #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb library(BiocParallel)  # load data data('decorateData')  # Evaluate hierarchical clustering # adjacentCount is the number of adjacent peaks considered in correlation treeList = runOrderedClusteringGenome( simData, simLocation) #>  Evaluating:chr20           #>   # Choose cutoffs and return cluster treeListClusters = createClusters( treeList, method = \"meanClusterSize\", meanClusterSize=c( 10, 20, 30, 40, 50) ) #> Method:meanClusterSize  # Evaluate strength of correlation for each cluster clstScore = scoreClusters(treeList, treeListClusters, BPPARAM = SerialParam() ) #> Evaluating strength of each cluster... #>  #> Dividing work into 5 chunks...  # Filter to retain only strong clusters clustInclude = retainClusters( clstScore, \"LEF\", 0.30 ) #> Using cutoffs: #> Cluster set\tcutoff #>  10\t\t0.3 #>  20\t\t0.3 #>  30\t\t0.3 #>  40\t\t0.3 #>  50\t\t0.3 #>   # get retained clusters treeListClusters_filter = filterClusters( treeListClusters, clustInclude)  # collapse similar clusters treeListClusters_collapse = collapseClusters( treeListClusters_filter, simLocation) #> Identifying redundant clusters..."},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/combineResults.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine results into a single data.frame — combineResults","title":"Combine results into a single data.frame — combineResults","text":"Combine results single data.frame easy post processing","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/combineResults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine results into a single data.frame — combineResults","text":"","code":"combineResults(   sledRes,   clstScore,   treeListClusters,   peakLocations,   verbose = TRUE )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/combineResults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine results into a single data.frame — combineResults","text":"sledRes sLEDresults evalDiffCorr() clstScore cluster summary statistics scoreClusters() treeListClusters epiclustDiscreteListContain createClusters() peakLocations GenomeRanges object verbose show messages","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/combineResults.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine results into a single data.frame — combineResults","text":"","code":"library(GenomicRanges) #> Loading required package: stats4 #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb library(EnsDb.Hsapiens.v86) #> Loading required package: ensembldb #> Loading required package: GenomicFeatures #> Loading required package: AnnotationDbi #> Loading required package: AnnotationFilter #>  #> Attaching package: 'ensembldb' #> The following object is masked from 'package:stats': #>  #>     filter  # load data data('decorateData')  # load gene locations ensdb = EnsDb.Hsapiens.v86  # Evaluate hierarchical clsutering treeList = runOrderedClusteringGenome( simData, simLocation )  #>  Evaluating:chr20           #>   # Choose cutoffs and return clusters treeListClusters = createClusters( treeList, method = \"meanClusterSize\", meanClusterSize=c( 10, 20) ) #> Method:meanClusterSize  # Evaluate strength of correlation for each cluster clstScore = scoreClusters(treeList, treeListClusters ) #> Evaluating strength of each cluster... #>  #> Dividing work into 2 chunks...  # Filter to retain only strong clusters # If lead eigen value fraction (LEF) > 30% then keep clusters # LEF is the fraction of variance explained by the first eigen-value clustInclude = retainClusters( clstScore, \"LEF\", 0.30 ) #> Using cutoffs: #> Cluster set\tcutoff #>  10\t\t0.3 #>  20\t\t0.3 #>   # get retained clusters treeListClusters_filter = filterClusters( treeListClusters, clustInclude)  # collapse redundant clusters treeListClusters_collapse = collapseClusters( treeListClusters_filter, simLocation, jaccardCutoff=0.9) #> Identifying redundant clusters...  # Evaluate Differential Correlation between two subsets of data sledRes = evalDiffCorr( simData, metadata$Disease, simLocation, treeListClusters_collapse, npermute=c(20, 200, 2000)) #> Note that clusters of 2 or fewer features are omitted from analysis #>  #> # Clusters:30 #> Initial pass through all clusters... #> Intensive second pass... #>  #> 1/1 [=========================================] 100% ETA: 0s #>  #> Combining results... #>   # Combine results for each cluster df_results = combineResults( sledRes, clstScore, treeListClusters, simLocation) #> Summarizing analysis... #> Summarizing cluster properties... #> Collecting cluster locations... #> Summarizing each cluster... #> Merging results..."},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/corSubsetPairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute correlations between pairs of features — corSubsetPairs","title":"Compute correlations between pairs of features — corSubsetPairs","text":"Compute correlations pairs features given idxi idxj","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/corSubsetPairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute correlations between pairs of features — corSubsetPairs","text":"","code":"corSubsetPairs(   Y,   idxi,   idxj,   method = c(\"pearson\", \"spearman\"),   silent = FALSE,   setNANtoZero = FALSE )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/corSubsetPairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute correlations between pairs of features — corSubsetPairs","text":"Y matrix rows features idxi indecies idxj indecies method specify correlation method: \"pearson\" \"spearman\" silent suppress messages setNANtoZero replace NAN correlation values zero","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/corSubsetPairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute correlations between pairs of features — corSubsetPairs","text":"Compute local correlations k: cor(Y[,idxi[k]], Y[,idxj[k]])","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/corSubsetPairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute correlations between pairs of features — corSubsetPairs","text":"","code":"# Simulate simple dataset N = 600 Y = matrix(rnorm(N*100), 100, N)  # select pairs to compute correlations between i1 = sample.int(N, 200, replace=TRUE) i2 = sample.int(N, 200, replace=TRUE)  # evaluate all piars C = corSubsetPairs(t(Y), i1,i2) #> Covariance matrix... #>  sparsity:99.944 % #>  memory usage:0 Mb  # show value C[i1[10], i2[10]] #> [1] -0.1375901  # show values from evaluating this pair directly cor(Y[,i1[10]], Y[,i2[10]]) #> [1] -0.1375901"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/corrMatrix.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test difference between two correlation matricies — corrMatrix.test","title":"Test difference between two correlation matricies — corrMatrix.test","text":"Test difference two correlation matricies using one 5 tests","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/corrMatrix.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test difference between two correlation matricies — corrMatrix.test","text":"","code":"corrMatrix.test(   Y,   group,   method = c(\"Box\", \"Box.permute\", \"Steiger.fisher\", \"Steiger\", \"Jennrich\", \"Factor\",     \"Mann.Whitney\", \"Kruskal.Wallis\", \"Cai.max\", \"Chang.maxBoot\", \"LC.U\", \"WL.randProj\",     \"Schott.Frob\", \"Delaneau\", \"deltaSLE\"),   method.corr = c(\"pearson\", \"kendall\", \"spearman\") )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/corrMatrix.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test difference between two correlation matricies — corrMatrix.test","text":"Y data matrix group factor defining groups method Specify test: \"Box\", \"Box.permute\", \"Steiger.fisher\", \"Steiger\", \"Jennrich\", \"Factor\", \"Mann.Whitney\" \"Kruskal.Wallis\", \"Cai.max\", \"Chang.maxBoot\", \"LC.U\", \"WL.randProj\", \"Schott.Frob\", \"Delaneau\", \"deltaSLE\" method.corr Specify type correlation: \"pearson\", \"kendall\", \"spearman\"","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/countClusters-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Count clusters on each chromosome — countClusters","title":"Count clusters on each chromosome — countClusters","text":"Count clusters chromosome","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/countClusters-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count clusters on each chromosome — countClusters","text":"","code":"countClusters(treeListClusters)  # S4 method for epiclustDiscreteList countClusters(treeListClusters)  # S4 method for epiclustDiscreteListContain countClusters(treeListClusters)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/countClusters-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count clusters on each chromosome — countClusters","text":"treeListClusters createClusters()","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/countClusters-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count clusters on each chromosome — countClusters","text":"count number clusters chromsome","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/countClusters-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count clusters on each chromosome — countClusters","text":"","code":"library(GenomicRanges)  data('decorateData')  # Evaluate hierarchical clustering treeList = runOrderedClusteringGenome( simData, simLocation )  #>  Evaluating:chr20           #>   # Choose cutoffs and return clusters treeListClusters = createClusters( treeList ) #> Method:capushe  # Count clusters on each chromsome countClusters( treeListClusters ) #> [1] 1"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/createClusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Create cluster from list of hclust objects — createClusters","title":"Create cluster from list of hclust objects — createClusters","text":"Create cluster list hclust objects","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/createClusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create cluster from list of hclust objects — createClusters","text":"","code":"createClusters(   treeList,   method = c(\"capushe\", \"bstick\", \"meanClusterSize\"),   meanClusterSize = 50,   pct = 0.15 )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/createClusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create cluster from list of hclust objects — createClusters","text":"treeList list hclust objects method 'capushe': slope heuristic. 'bstick': broken stick. 'meanClusterSize': create clusters based target mean value. meanClusterSize select target mean cluster size.  Can array values pct minimum percentage points plateau selection capushe selection. Can array values","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/createClusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create cluster from list of hclust objects — createClusters","text":"Convert hierarchical clustering discrete clusters based selection criteria method","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/createClusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create cluster from list of hclust objects — createClusters","text":"","code":"library(GenomicRanges) library(EnsDb.Hsapiens.v86)  # load data data('decorateData')  # load gene locations ensdb = EnsDb.Hsapiens.v86  # Evaluate hierarchical clustering treeList = runOrderedClusteringGenome( simData, simLocation )  #>  Evaluating:chr20           #>   # Choose cutoffs and return clusters treeListClusters = createClusters( treeList ) #> Method:capushe  # Plot correlations and clusters in region defined by query query = range(simLocation)  plotDecorate( ensdb, treeList, treeListClusters, simLocation, query)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/createCorrelationMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create correlation matrix — createCorrelationMatrix","title":"Create correlation matrix — createCorrelationMatrix","text":"Create correlation matrix based correlation pairs peaks","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/createCorrelationMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create correlation matrix — createCorrelationMatrix","text":"","code":"createCorrelationMatrix(   query,   regionQuant,   adjacentCount = 500,   windowSize = 1e+06,   method = \"adjacent\",   method.corr = c(\"pearson\", \"spearman\"),   quiet = FALSE,   setNANtoZero = FALSE )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/createCorrelationMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create correlation matrix — createCorrelationMatrix","text":"query GRanges object intervals query regionQuant normalized quantifications regions query.  Rows features, like limma adjacentCount number adjacent entries compute correlation windowSize width window bp around interval beyond weight zero method 'adjacent': compute corr fixed count sliding window define adjacentCount.  \"distance\": compute corr entries within windowSize bp method.corr specify correlation method: \"pearson\" \"spearman\" quiet suppress messages setNANtoZero replace NAN correlation values zero","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/createCorrelationMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create correlation matrix — createCorrelationMatrix","text":"peak j distance d_i,j, M[,j] = cor( vobj$E[,], vobj$E[j,] ) return sparse symmatric matrix","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/createCorrelationMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create correlation matrix — createCorrelationMatrix","text":"","code":"data('decorateData')  C = createCorrelationMatrix(simLocation, simData) #> adjacent: 500entries #> Covariance matrix... #>  sparsity:49.888 % #>  memory usage:1.2 Mb"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/decorateData.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated data to show correlation clustering — decorateData","title":"Simulated data to show correlation clustering — decorateData","text":"Simulated data show correlation clustering Simulated data show correlation clustering. GRanges object indicating genomic position data rows simData Simulated disease status differential analysis","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/decorateData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated data to show correlation clustering — decorateData","text":"","code":"data(decorateData)  data(decorateData)  data(decorateData)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/decorateData.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated data to show correlation clustering — decorateData","text":"object class matrix (inherits array) 448 rows 1000 columns. object class GRanges length 448. object class data.frame 1000 rows 1 columns.","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/delaneau.score.html","id":null,"dir":"Reference","previous_headings":"","what":"Score impact of each sample on correlation sturucture — delaneau.score","title":"Score impact of each sample on correlation sturucture — delaneau.score","text":"Score impact sample correlation sturucture.  Compute correlation using samples (.e. C), compute correlation omitting sample (.e. Ci).  score sample based difference C Ci.","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/delaneau.score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score impact of each sample on correlation sturucture — delaneau.score","text":"","code":"delaneau.score(Y, method = c(\"pearson\", \"kendall\", \"spearman\"))"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/delaneau.score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score impact of each sample on correlation sturucture — delaneau.score","text":"Y data matrix samples rows variables columns method specify correlation method: \"pearson\", \"kendall\" \"spearman\"","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/delaneau.score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score impact of each sample on correlation sturucture — delaneau.score","text":"score sample measure impact correlation structure","code":""},{"path":[]},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/delaneau.score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Score impact of each sample on correlation sturucture — delaneau.score","text":"","code":"# load iris data data(iris)  # Evalaute score on each sample delaneau.score( iris[,1:4] ) #>             1             2             3             4             5  #>  2.392020e-03 -2.023052e-03 -2.254228e-04 -1.175789e-03  3.067485e-03  #>             6             7             8             9            10  #>  3.613378e-03  1.739786e-03  1.610689e-03 -3.581280e-03 -1.058259e-03  #>            11            12            13            14            15  #>  3.585132e-03  1.608228e-03 -2.264272e-03 -2.863378e-03  5.269956e-03  #>            16            17            18            19            20  #>  4.101427e-03  4.175666e-03  2.310130e-03  3.590239e-03  3.938222e-03  #>            21            22            23            24            25  #>  1.847168e-03  3.298703e-03  3.512710e-03  8.622414e-04  1.644556e-03  #>            26            27            28            29            30  #> -1.787499e-03  1.532360e-03  2.385847e-03  1.754538e-03 -1.226307e-04  #>            31            32            33            34            35  #> -1.039851e-03  1.740320e-03  5.640836e-03  5.352945e-03 -1.002131e-03  #>            36            37            38            39            40  #> -2.111842e-05  2.801364e-03  3.216784e-03 -2.461947e-03  1.652132e-03  #>            41            42            43            44            45  #>  2.358733e-03 -1.152656e-02 -1.921528e-04  2.156260e-03  3.406659e-03  #>            46            47            48            49            50  #> -2.001511e-03  4.051521e-03 -2.039643e-04  3.560882e-03  8.334199e-04  #>            51            52            53            54            55  #> -2.621935e-04 -7.436557e-04 -1.444262e-04 -1.576373e-03  8.006617e-04  #>            56            57            58            59            60  #>  2.988601e-04 -1.430851e-03 -3.516053e-03  7.904226e-04  1.251058e-04  #>            61            62            63            64            65  #> -6.620587e-03  1.136425e-04 -1.713778e-03  3.127337e-04 -4.507567e-05  #>            66            67            68            69            70  #>  8.323117e-05  4.918621e-04 -3.178555e-04  6.151750e-04 -1.254188e-03  #>            71            72            73            74            75  #> -4.442575e-04  2.056908e-04  1.251319e-03  5.066490e-04  4.963374e-04  #>            76            77            78            79            80  #>  3.672432e-04  1.391915e-03 -7.654247e-05  2.766486e-04 -1.282107e-03  #>            81            82            83            84            85  #> -1.954137e-03 -2.335353e-03 -3.072779e-04  1.005528e-03  8.558707e-04  #>            86            87            88            89            90  #> -1.385069e-03 -2.419081e-04  5.224943e-04  1.949653e-04 -7.713257e-04  #>            91            92            93            94            95  #> -2.010578e-04  6.732146e-05 -4.417269e-04 -4.271265e-03 -3.506618e-05  #>            96            97            98            99           100  #>  1.276182e-04  1.455780e-04  2.810288e-04 -2.715923e-03  2.715293e-05  #>           101           102           103           104           105  #> -2.811279e-03  1.608949e-03 -8.295545e-04  4.658131e-04 -4.556453e-04  #>           106           107           108           109           110  #> -9.522773e-04  1.776821e-03  7.473937e-04  2.684696e-03 -9.533994e-03  #>           111           112           113           114           115  #> -1.643350e-03  1.352727e-03 -5.915504e-04  2.258187e-03  2.590909e-03  #>           116           117           118           119           120  #> -1.672388e-03 -2.684843e-04 -1.375366e-02  3.536663e-03  8.647845e-04  #>           121           122           123           124           125  #> -2.868901e-03  1.845266e-03  1.851005e-03  1.123129e-03 -3.362203e-03  #>           126           127           128           129           130  #> -2.206105e-03  7.682669e-04  8.593464e-05  1.053592e-03  3.582294e-04  #>           131           132           133           134           135  #>  1.653224e-03 -1.216428e-02  1.149715e-03  7.533122e-04  1.591714e-03  #>           136           137           138           139           140  #> -9.175706e-04 -3.515552e-03 -8.308748e-04  2.086295e-04 -1.421053e-03  #>           141           142           143           144           145  #> -1.533218e-03 -1.239890e-03  1.608949e-03 -2.904417e-03 -3.752880e-03  #>           146           147           148           149           150  #> -3.482134e-04  1.903139e-03 -2.864917e-04 -2.970967e-03  3.940631e-04"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/delaneau.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test association between correlation sturucture and variable — delaneau.test","title":"Test association between correlation sturucture and variable — delaneau.test","text":"Score impact sample correlation sturucture peform test association variable using Kruskal-Wallis test","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/delaneau.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test association between correlation sturucture and variable — delaneau.test","text":"","code":"delaneau.test(Y, variable, method = c(\"pearson\", \"kendall\", \"spearman\"))"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/delaneau.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test association between correlation sturucture and variable — delaneau.test","text":"Y data matrix samples rows variables columns variable variable number entries must equal nrow(Y).  Can discrete continuous. method specify correlation method: \"pearson\", \"kendall\" \"spearman\"","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/delaneau.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test association between correlation sturucture and variable — delaneau.test","text":"list p-value, estimate method used","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/delaneau.test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test association between correlation sturucture and variable — delaneau.test","text":"statistical test used depends variable specified. variable factor multiple levels, use Kruskal-Wallis test variable factor 2 levels, use Wilcoxon test variable continuous, use Wilcoxon test","code":""},{"path":[]},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/delaneau.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test association between correlation sturucture and variable — delaneau.test","text":"","code":"# load iris data data(iris)  # variable is factor with multiple levels # use kruskal.test delaneau.test( iris[,1:4], iris[,5] ) #> $p.value #> [1] 5.648845e-05 #>  #> $estimate #> Kruskal-Wallis chi-squared  #>                   19.56295  #>  #> $method #> [1] \"kruskal.test\" #>   # variable is factor with 2 levels # use wilcox.test delaneau.test( iris[1:100,1:4], iris[1:100,5] ) #> $p.value #> [1] 0.2510425 #>  #> $estimate #> [1] -0.0005950244 #>  #> $method #> [1] \"wilcox.test\" #>   # variable is continuous # use cor.test with spearman delaneau.test( iris[,1:4], iris[,1] ) #> $p.value #> [1] 0.0504917 #>  #> $estimate #>        rho  #> -0.1599965  #>  #> $method #> [1] \"cor.test\" #>"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/dot-evalDiffCorr.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal .evalDiffCorr — .evalDiffCorr","title":"Internal .evalDiffCorr — .evalDiffCorr","text":"Internal .evalDiffCorr","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/dot-evalDiffCorr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal .evalDiffCorr — .evalDiffCorr","text":"","code":".evalDiffCorr(   epiSignal,   testVariable,   gRanges,   clustList,   npermute = c(100, 10000, 1e+05),   adj.beta = 0,   rho = 0,   sumabs.seq = 1,   BPPARAM = bpparam(),   method = c(\"sLED\", \"Box\", \"Box.permute\", \"Steiger.fisher\", \"Steiger\", \"Jennrich\",     \"Factor\", \"Mann.Whitney\", \"Kruskal.Wallis\", \"Cai.max\", \"Chang.maxBoot\", \"LC.U\",     \"WL.randProj\", \"Schott.Frob\", \"Delaneau\", \"deltaSLE\"),   method.corr = c(\"pearson\", \"kendall\", \"spearman\") )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/dot-evalDiffCorr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal .evalDiffCorr — .evalDiffCorr","text":"epiSignal matrix EList epigentic signal.  Rows features columns samples testVariable factor indicating two subsets samples compare gRanges GenomciRanges corresponding rows epiSignal clustList list cluster assignments npermute array two entries min max number permutations adj.beta parameter sLED rho large positive constant (X)-(Y)+diag(rep(rho,p)) positive definite. p number features sumabs.seq sparsity parameter BPPARAM parameters parallel evaluation method \"sLED\", \"Box\", \"Box.permute\", \"Steiger.fisher\", \"Steiger\", \"Jennrich\", \"Factor\", \"Mann.Whitney\", \"Kruskal.Wallis\", \"Cai.max\", \"Chang.maxBoot\", \"LC.U\", \"WL.randProj\", \"Schott.Frob\", \"Delaneau\", \"deltaSLE\" method.corr Specify type correlation: \"pearson\", \"kendall\", \"spearman\"","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/dot-evalDiffCorr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal .evalDiffCorr — .evalDiffCorr","text":"list result chromosome clustList","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/epiclust-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class epiclust — epiclust-class","title":"Class epiclust — epiclust-class","text":"Class epiclust","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/epiclustDiscreteList-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class epiclustDiscreteList — epiclustDiscreteList-class","title":"Class epiclustDiscreteList — epiclustDiscreteList-class","text":"Class epiclustDiscreteList","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/epiclustDiscreteListContain-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class epiclustDiscreteListContain — epiclustDiscreteListContain-class","title":"Class epiclustDiscreteListContain — epiclustDiscreteListContain-class","text":"Class epiclustDiscreteListContain: list containing epiclustDiscreteList objects","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/epiclustList-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class epiclustList — epiclustList-class","title":"Class epiclustList — epiclustList-class","text":"Class epiclustList","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/evalDiffCorr-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Differential Correlation — evalDiffCorr","title":"Evaluate Differential Correlation — evalDiffCorr","text":"Evaluate Differential Correlation two subsets data","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/evalDiffCorr-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Differential Correlation — evalDiffCorr","text":"","code":"evalDiffCorr(   epiSignal,   testVariable,   gRanges,   clustList,   npermute = c(100, 10000, 1e+05),   adj.beta = 0,   rho = 0,   sumabs.seq = 1,   BPPARAM = bpparam(),   method = c(\"sLED\", \"Box\", \"Box.permute\", \"Steiger.fisher\", \"Steiger\", \"Jennrich\",     \"Factor\", \"Mann.Whitney\", \"Kruskal.Wallis\", \"Cai.max\", \"Chang.maxBoot\", \"LC.U\",     \"WL.randProj\", \"Schott.Frob\", \"Delaneau\", \"deltaSLE\"),   method.corr = c(\"pearson\", \"kendall\", \"spearman\") )  # S4 method for EList,ANY,GRanges,list evalDiffCorr(   epiSignal,   testVariable,   gRanges,   clustList,   npermute = c(100, 10000, 1e+05),   adj.beta = 0,   rho = 0,   sumabs.seq = 1,   BPPARAM = bpparam(),   method = c(\"sLED\", \"Box\", \"Box.permute\", \"Steiger.fisher\", \"Steiger\", \"Jennrich\",     \"Factor\", \"Mann.Whitney\", \"Kruskal.Wallis\", \"Cai.max\", \"Chang.maxBoot\", \"LC.U\",     \"WL.randProj\", \"Schott.Frob\", \"Delaneau\", \"deltaSLE\"),   method.corr = c(\"pearson\", \"kendall\", \"spearman\") )  # S4 method for matrix,ANY,GRanges,list evalDiffCorr(   epiSignal,   testVariable,   gRanges,   clustList,   npermute = c(100, 10000, 1e+05),   adj.beta = 0,   rho = 0,   sumabs.seq = 1,   BPPARAM = bpparam(),   method = c(\"sLED\", \"Box\", \"Box.permute\", \"Steiger.fisher\", \"Steiger\", \"Jennrich\",     \"Factor\", \"Mann.Whitney\", \"Kruskal.Wallis\", \"Cai.max\", \"Chang.maxBoot\", \"LC.U\",     \"WL.randProj\", \"Schott.Frob\", \"Delaneau\", \"deltaSLE\"),   method.corr = c(\"pearson\", \"kendall\", \"spearman\") )  # S4 method for data.frame,ANY,GRanges,list evalDiffCorr(   epiSignal,   testVariable,   gRanges,   clustList,   npermute = c(100, 10000, 1e+05),   adj.beta = 0,   rho = 0,   sumabs.seq = 1,   BPPARAM = bpparam(),   method = c(\"sLED\", \"Box\", \"Box.permute\", \"Steiger.fisher\", \"Steiger\", \"Jennrich\",     \"Factor\", \"Mann.Whitney\", \"Kruskal.Wallis\", \"Cai.max\", \"Chang.maxBoot\", \"LC.U\",     \"WL.randProj\", \"Schott.Frob\", \"Delaneau\", \"deltaSLE\"),   method.corr = c(\"pearson\", \"kendall\", \"spearman\") )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/evalDiffCorr-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Differential Correlation — evalDiffCorr","text":"epiSignal matrix EList epigentic signal.  Rows features columns samples testVariable factor indicating two subsets samples compare gRanges GenomciRanges corresponding rows epiSignal clustList list cluster assignments npermute array two entries min max number permutations adj.beta parameter sLED rho large positive constant (X)-(Y)+diag(rep(rho,p)) positive definite. p number features sumabs.seq sparsity parameter BPPARAM parameters parallel evaluation method \"sLED\", \"Box\", \"Box.permute\", \"Steiger.fisher\", \"Steiger\", \"Jennrich\", \"Factor\", \"Mann.Whitney\", \"Kruskal.Wallis\", \"Cai.max\", \"Chang.maxBoot\", \"LC.U\", \"WL.randProj\", \"Schott.Frob\", \"Delaneau\", \"deltaSLE\" method.corr Specify type correlation: \"pearson\", \"kendall\", \"spearman\"","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/evalDiffCorr-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Differential Correlation — evalDiffCorr","text":"list result chromosome clustList","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/evalDiffCorr-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate Differential Correlation — evalDiffCorr","text":"Correlation sturucture two subsets data evaluated sparse-Leading-Eigenvalue-Driven (sLED) test: Zhu, Lingxue, Jing Lei, Bernie Devlin, Kathryn Roeder. 2017. Testing high-dimensional covariance matrices, application detecting schizophrenia risk genes. Annals Applied Statistics. 11:3 1810-1831. doi:10.1214/17-AOAS1062","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/evalDiffCorr-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate Differential Correlation — evalDiffCorr","text":"","code":"library(GenomicRanges) library(EnsDb.Hsapiens.v86)  # load data data('decorateData')  # load gene locations ensdb = EnsDb.Hsapiens.v86  # Evaluate hierarchical clsutering treeList = runOrderedClusteringGenome( simData, simLocation )  #>  Evaluating:chr20           #>   # Choose cutoffs and return clusters treeListClusters = createClusters( treeList, method = \"meanClusterSize\", meanClusterSize=c( 10, 20) ) #> Method:meanClusterSize  # Plot correlations and clusters in region defined by query query = range(simLocation)  # Plot clusters plotDecorate( ensdb, treeList, treeListClusters, simLocation, query)   # Evaluate Differential Correlation between two subsets of data sledRes = evalDiffCorr( simData, metadata$Disease, simLocation, treeListClusters, npermute=c(20, 200, 2000)) #> Note that clusters of 2 or fewer features are omitted from analysis #>  #> # Clusters:67 #> Initial pass through all clusters... #> Intensive second pass... #>  #> 1/3 [=============>---------------------------]  33% ETA:14s #>  #> 2/3 [==========================>--------------]  67% ETA: 6s #>  #> 3/3 [=========================================] 100% ETA: 0s #>  #> Combining results... #>   # get summary of results df = summary( sledRes )  # print results head(df) #>   id chrom cluster       pValue       stat n.perm    p.adjust #> 1 20 chr20       4 0.0004997501 -2.1949654   2000 0.006163585 #> 2 10 chr20       4 0.0004997501 -0.7501589   2000 0.006163585 #> 3 20 chr20       2 0.0004997501 -0.7501589   2000 0.006163585 #> 4 10 chr20      14 0.1293532338  0.1434676    200 0.848324515 #> 5 10 chr20      40 0.1641791045 -0.3653258    200 0.848324515 #> 6 20 chr20      19 0.1641791045 -0.3653258    200 0.848324515  # extract peak ID's from most significant cluster peakIDs = getFeaturesInCluster( treeListClusters, df$chrom[1], df$cluster[1], \"20\")  # plot comparison of correlation matrices for peaks in peakIDs #  where data is subset by metadata$Disease main = paste0(df$chrom[1], ': cluster ', df$cluster[1]) plotCompareCorr( simData, peakIDs, metadata$Disease) + ggtitle(main)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/evaluateCorrDecay.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate the decay of correlation versus distance between features — evaluateCorrDecay","title":"Evaluate the decay of correlation versus distance between features — evaluateCorrDecay","text":"pairs features evaluate physical distance correlation","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/evaluateCorrDecay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate the decay of correlation versus distance between features — evaluateCorrDecay","text":"","code":"evaluateCorrDecay(treeList, gr, chromArray = seqlevels(gr), verbose = TRUE)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/evaluateCorrDecay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate the decay of correlation versus distance between features — evaluateCorrDecay","text":"treeList list hclust objects gr GenomicRanges object corresponding features clustered treeList chromArray Use set chromosmes.  Can substantially reduce memory usage verbose show progress","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/evaluateCorrDecay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate the decay of correlation versus distance between features — evaluateCorrDecay","text":"data.frame distance correlation value pairs features already evalauted treeList.  Note runOrderedClusteringGenome() returns treeList evalutes correlation specified number adjacent peaks","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/evaluateCorrDecay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate the decay of correlation versus distance between features — evaluateCorrDecay","text":"","code":"library(GenomicRanges) library(ggplot2)  data('decorateData')  # Evaluate hierarchical clustering treeList = runOrderedClusteringGenome( simData, simLocation )  #>  Evaluating:chr20           #>   # Evaluate how correlation between features decays with distance dfDist = evaluateCorrDecay( treeList, simLocation ) #>  chr20       #>   # make plot plotCorrDecay( dfDist ) #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale. #> Scale for x is already present. #> Adding another scale for x, which will replace the existing scale. #> Warning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0. #> ℹ Please use `after_stat(density)` instead. #> ℹ The deprecated feature was likely used in the decorate package. #>   Please report the issue at #>   <https://github.com/DiseaseNeuroGenomics/decorate/issues>. #> Warning: Removed 23 rows containing non-finite values (`stat_density2d()`). #> `geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")' #> Warning: Removed 23 rows containing non-finite values (`stat_smooth()`). #> Warning: Removed 396 rows containing missing values (`geom_tile()`). #> Warning: Removed 15 rows containing missing values (`geom_point()`)."},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/extractCorrelationScores.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract sample-level correlation scores — extractCorrelationScores","title":"Extract sample-level correlation scores — extractCorrelationScores","text":"Extract sample-level correlation scores cluster","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/extractCorrelationScores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract sample-level correlation scores — extractCorrelationScores","text":"","code":"extractCorrelationScores(   epiSignal,   gRanges,   clustList,   method = c(\"deltaSLE\", \"Delaneau\"),   method.corr = c(\"pearson\", \"kendall\", \"spearman\"),   BPPARAM = SerialParam(),   rho = 0.1,   sumabs = 1 )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/extractCorrelationScores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract sample-level correlation scores — extractCorrelationScores","text":"epiSignal matrix EList epigentic signal.  Rows features columns samples gRanges GenomciRanges corresponding rows epiSignal clustList list cluster assignments method \"deltaSLE\", \"Delaneau\" method.corr Specify type correlation: \"pearson\", \"kendall\", \"spearman\" BPPARAM parameters parallel evaluation rho used sle.score(). positive constant cor(Y) + diag(rep(rho,p)) positive definite.  See sLED::sLED() sumabs used sle.score(). regularization paramter. Value 1 gives regularization, sumabs*sqrt(p) upperbound L_1 norm v, controlling sparsity solution. Must 1/sqrt(p) 1. See sLED::sLED()","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/extractCorrelationScores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract sample-level correlation scores — extractCorrelationScores","text":"matrix scores sample cluster","code":""},{"path":[]},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/extractCorrelationScores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract sample-level correlation scores — extractCorrelationScores","text":"","code":"library(GenomicRanges) #> Loading required package: stats4 #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb  # load data data('decorateData')  # Evaluate hierarchical clustering # adjacentCount is the number of adjacent peaks considered in correlation treeList = runOrderedClusteringGenome( simData, simLocation) #>  Evaluating:chr20           #>   # Choose cutoffs and return cluster treeListClusters = createClusters( treeList, method = \"meanClusterSize\", meanClusterSize=c( 10, 20, 30, 40, 50) ) #> Method:meanClusterSize  # Evaluate strength of correlation for each cluster clstScore = scoreClusters(treeList, treeListClusters ) #> Evaluating strength of each cluster... #>  #> Dividing work into 5 chunks...  # Filter to retain only strong clusters clustInclude = retainClusters( clstScore, \"LEF\", 0.30 ) #> Using cutoffs: #> Cluster set\tcutoff #>  10\t\t0.3 #>  20\t\t0.3 #>  30\t\t0.3 #>  40\t\t0.3 #>  50\t\t0.3 #>   # get retained clusters treeListClusters_filter = filterClusters( treeListClusters, clustInclude)  # collapse similar clusters treeListClusters_collapse = collapseClusters( treeListClusters_filter, simLocation) #> Identifying redundant clusters...  # get correlation scores for each sample for each cluster corScores = extractCorrelationScores( simData, simLocation, treeListClusters_collapse )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/filterClusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract subset of clusters — filterClusters","title":"Extract subset of clusters — filterClusters","text":"Extract subset clusters based entries chroms clusters","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/filterClusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract subset of clusters — filterClusters","text":"","code":"filterClusters(treeListClusters, clustInclude)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/filterClusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract subset of clusters — filterClusters","text":"treeListClusters createClusters() clustInclude data.frame retainClusters() indcating clusters include","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/filterClusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract subset of clusters — filterClusters","text":"epiclustDiscreteList specified clusters","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/filterClusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract subset of clusters — filterClusters","text":"","code":"library(GenomicRanges) library(BiocParallel)  data('decorateData')  # Evaluate hierarchical clustering treeList = runOrderedClusteringGenome( simData, simLocation )  #>  Evaluating:chr20           #>   # Choose cutoffs and return clusters treeListClusters = createClusters( treeList ) #> Method:capushe  # Evaluate score for each cluster clstScore = scoreClusters(treeList, treeListClusters, BPPARAM=SerialParam() ) #> Evaluating strength of each cluster... #>  #> Dividing work into 1 chunks...  # Retain clusters that pass this criteria clustInclude = retainClusters( clstScore, \"LEF\", 0.30 ) #> Using cutoffs: #> Cluster set\tcutoff #>  0.15\t\t0.3 #>   # get retained clusters treeListClusters_filter = filterClusters( treeListClusters, clustInclude)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getClusterNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Get name of each cluster — getClusterNames","title":"Get name of each cluster — getClusterNames","text":"Get name cluster parameter:chrom:cluster","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getClusterNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get name of each cluster — getClusterNames","text":"","code":"getClusterNames(clustList)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getClusterNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get name of each cluster — getClusterNames","text":"clustList list cluster assignments","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getClusterNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get name of each cluster — getClusterNames","text":"array cluster names","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getClusterNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get name of each cluster — getClusterNames","text":"","code":"library(GenomicRanges)  # load data data('decorateData')  # Evaluate hierarchical clustering # adjacentCount is the number of adjacent peaks considered in correlation treeList = runOrderedClusteringGenome( simData, simLocation) #>  Evaluating:chr20           #>   # Choose cutoffs and return cluster treeListClusters = createClusters( treeList, method = \"meanClusterSize\", meanClusterSize=c( 10, 20, 30, 40, 50) ) #> Method:meanClusterSize  # Name of each cluster is parameter:chrom:cluster getClusterNames( treeListClusters) #>     parameter chrom cluster        name #> 1          10 chr20       1  10_chr20_1 #> 2          10 chr20       2  10_chr20_2 #> 3          10 chr20       3  10_chr20_3 #> 4          10 chr20       4  10_chr20_4 #> 5          10 chr20       5  10_chr20_5 #> 6          10 chr20       6  10_chr20_6 #> 7          10 chr20       7  10_chr20_7 #> 8          10 chr20       8  10_chr20_8 #> 9          10 chr20       9  10_chr20_9 #> 10         10 chr20      10 10_chr20_10 #> 11         10 chr20      11 10_chr20_11 #> 12         10 chr20      12 10_chr20_12 #> 13         10 chr20      13 10_chr20_13 #> 14         10 chr20      14 10_chr20_14 #> 15         10 chr20      15 10_chr20_15 #> 16         10 chr20      16 10_chr20_16 #> 17         10 chr20      17 10_chr20_17 #> 18         10 chr20      18 10_chr20_18 #> 19         10 chr20      19 10_chr20_19 #> 20         10 chr20      20 10_chr20_20 #> 21         10 chr20      21 10_chr20_21 #> 22         10 chr20      22 10_chr20_22 #> 23         10 chr20      23 10_chr20_23 #> 24         10 chr20      24 10_chr20_24 #> 25         10 chr20      25 10_chr20_25 #> 26         10 chr20      26 10_chr20_26 #> 27         10 chr20      27 10_chr20_27 #> 28         10 chr20      28 10_chr20_28 #> 29         10 chr20      29 10_chr20_29 #> 30         10 chr20      30 10_chr20_30 #> 31         10 chr20      31 10_chr20_31 #> 32         10 chr20      32 10_chr20_32 #> 33         10 chr20      33 10_chr20_33 #> 34         10 chr20      34 10_chr20_34 #> 35         10 chr20      35 10_chr20_35 #> 36         10 chr20      36 10_chr20_36 #> 37         10 chr20      37 10_chr20_37 #> 38         10 chr20      38 10_chr20_38 #> 39         10 chr20      39 10_chr20_39 #> 40         10 chr20      40 10_chr20_40 #> 41         10 chr20      41 10_chr20_41 #> 42         10 chr20      42 10_chr20_42 #> 43         10 chr20      43 10_chr20_43 #> 44         10 chr20      44 10_chr20_44 #> 45         10 chr20      45 10_chr20_45 #> 46         20 chr20       1  20_chr20_1 #> 47         20 chr20       2  20_chr20_2 #> 48         20 chr20       3  20_chr20_3 #> 49         20 chr20       4  20_chr20_4 #> 50         20 chr20       5  20_chr20_5 #> 51         20 chr20       6  20_chr20_6 #> 52         20 chr20       7  20_chr20_7 #> 53         20 chr20       8  20_chr20_8 #> 54         20 chr20       9  20_chr20_9 #> 55         20 chr20      10 20_chr20_10 #> 56         20 chr20      11 20_chr20_11 #> 57         20 chr20      12 20_chr20_12 #> 58         20 chr20      13 20_chr20_13 #> 59         20 chr20      14 20_chr20_14 #> 60         20 chr20      15 20_chr20_15 #> 61         20 chr20      16 20_chr20_16 #> 62         20 chr20      17 20_chr20_17 #> 63         20 chr20      18 20_chr20_18 #> 64         20 chr20      19 20_chr20_19 #> 65         20 chr20      20 20_chr20_20 #> 66         20 chr20      21 20_chr20_21 #> 67         20 chr20      22 20_chr20_22 #> 68         30 chr20       1  30_chr20_1 #> 69         30 chr20       2  30_chr20_2 #> 70         30 chr20       3  30_chr20_3 #> 71         30 chr20       4  30_chr20_4 #> 72         30 chr20       5  30_chr20_5 #> 73         30 chr20       6  30_chr20_6 #> 74         30 chr20       7  30_chr20_7 #> 75         30 chr20       8  30_chr20_8 #> 76         30 chr20       9  30_chr20_9 #> 77         30 chr20      10 30_chr20_10 #> 78         30 chr20      11 30_chr20_11 #> 79         30 chr20      12 30_chr20_12 #> 80         30 chr20      13 30_chr20_13 #> 81         30 chr20      14 30_chr20_14 #> 82         30 chr20      15 30_chr20_15 #> 83         40 chr20       1  40_chr20_1 #> 84         40 chr20       2  40_chr20_2 #> 85         40 chr20       3  40_chr20_3 #> 86         40 chr20       4  40_chr20_4 #> 87         40 chr20       5  40_chr20_5 #> 88         40 chr20       6  40_chr20_6 #> 89         40 chr20       7  40_chr20_7 #> 90         40 chr20       8  40_chr20_8 #> 91         40 chr20       9  40_chr20_9 #> 92         40 chr20      10 40_chr20_10 #> 93         40 chr20      11 40_chr20_11 #> 94         50 chr20       1  50_chr20_1 #> 95         50 chr20       2  50_chr20_2 #> 96         50 chr20       3  50_chr20_3 #> 97         50 chr20       4  50_chr20_4 #> 98         50 chr20       5  50_chr20_5 #> 99         50 chr20       6  50_chr20_6 #> 100        50 chr20       7  50_chr20_7 #> 101        50 chr20       8  50_chr20_8 #> 102        50 chr20       9  50_chr20_9"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getClusterRanges.html","id":null,"dir":"Reference","previous_headings":"","what":"Get genome coordinates for each cluster — getClusterRanges","title":"Get genome coordinates for each cluster — getClusterRanges","text":"Get genome coordinates cluster GRanges object","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getClusterRanges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get genome coordinates for each cluster — getClusterRanges","text":"","code":"getClusterRanges(gRanges, clustList, verbose = TRUE)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getClusterRanges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get genome coordinates for each cluster — getClusterRanges","text":"gRanges GenomciRanges corresponding rows epiSignal clustList list cluster assignments verbose write messages screen","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getClusterRanges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get genome coordinates for each cluster — getClusterRanges","text":"GRanges object","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getClusterRanges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get genome coordinates for each cluster — getClusterRanges","text":"","code":"library(GenomicRanges)  # load data data('decorateData')  # Evaluate hierarchical clustering # adjacentCount is the number of adjacent peaks considered in correlation treeList = runOrderedClusteringGenome( simData, simLocation) #>  Evaluating:chr20           #>   # Choose cutoffs and return cluster treeListClusters = createClusters( treeList, method = \"meanClusterSize\", meanClusterSize=c( 10, 20, 30, 40, 50) ) #> Method:meanClusterSize  # Get start and end coordinates for each cluster # cluster name is parameter:chrom:cluster getClusterRanges( simLocation, treeListClusters) #> Summarizing each cluster..."},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getFeaturesInCluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Get feature names in selected cluster — getFeaturesInCluster","title":"Get feature names in selected cluster — getFeaturesInCluster","text":"Get feature names selected cluster given chrom clusterid","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getFeaturesInCluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get feature names in selected cluster — getFeaturesInCluster","text":"","code":"getFeaturesInCluster(treeListClusters, chrom, clustID, id)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getFeaturesInCluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get feature names in selected cluster — getFeaturesInCluster","text":"treeListClusters createClusters() chrom chromosome name cluster clustID cluster identifier id clustering parameter identifier","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getFeaturesInCluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get feature names in selected cluster — getFeaturesInCluster","text":"array feature names","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getFeaturesInCluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get feature names in selected cluster — getFeaturesInCluster","text":"","code":"library(GenomicRanges)  data('decorateData')  # Evaluate hierarchical clustering treeList = runOrderedClusteringGenome( simData, simLocation )  #>  Evaluating:chr20           #>   # Choose cutoffs and return clusters treeListClusters = createClusters( treeList, method='meanClusterSize', meanClusterSize = 50 ) #> Method:meanClusterSize  # Find chromsome and cluster of peak_204 getFeaturesInCluster( treeListClusters, \"chr20\", 3, \"50\") #>  [1] \"peak_100\" \"peak_101\" \"peak_102\" \"peak_103\" \"peak_104\" \"peak_105\" #>  [7] \"peak_106\" \"peak_107\" \"peak_108\" \"peak_109\" \"peak_110\" \"peak_111\" #> [13] \"peak_112\" \"peak_113\" \"peak_114\" \"peak_115\" \"peak_116\" \"peak_117\" #> [19] \"peak_118\" \"peak_119\" \"peak_120\" \"peak_121\" \"peak_122\" \"peak_123\" #> [25] \"peak_124\" \"peak_125\""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getFeaturesInClusterList.html","id":null,"dir":"Reference","previous_headings":"","what":"Get feature names in selected cluster — getFeaturesInClusterList","title":"Get feature names in selected cluster — getFeaturesInClusterList","text":"Get feature names selected cluster given array chrom cluster ids","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getFeaturesInClusterList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get feature names in selected cluster — getFeaturesInClusterList","text":"","code":"getFeaturesInClusterList(treeListClusters, chrom, clustID, id)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getFeaturesInClusterList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get feature names in selected cluster — getFeaturesInClusterList","text":"treeListClusters createClusters() chrom chromosome name cluster clustID cluster identifier id clustering parameter identifier","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getFeaturesInClusterList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get feature names in selected cluster — getFeaturesInClusterList","text":"list array feature names.  Query index returned list index ","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getFeaturesInClusterList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get feature names in selected cluster — getFeaturesInClusterList","text":"","code":"library(GenomicRanges)  data('decorateData')  # Evaluate hierarchical clustering treeList = runOrderedClusteringGenome( simData, simLocation )  #>  Evaluating:chr20           #>   # Choose cutoffs and return clusters treeListClusters = createClusters( treeList, method='meanClusterSize', meanClusterSize = 50 ) #> Method:meanClusterSize  df_cluster = data.frame( chrom = c(\"chr20\", \"chr20\"),    cluster = c(3,5),    id = c(\"50\", \"50\"), stringsAsFactors=FALSE )  # Find features for the clusters in df_cluster getFeaturesInClusterList( treeListClusters, chrom=df_cluster$chrom, clustID=df_cluster$cluster, id=df_cluster$id) #> [[1]] #>  [1] \"peak_100\" \"peak_101\" \"peak_102\" \"peak_103\" \"peak_104\" \"peak_105\" #>  [7] \"peak_106\" \"peak_107\" \"peak_108\" \"peak_109\" \"peak_110\" \"peak_111\" #> [13] \"peak_112\" \"peak_113\" \"peak_114\" \"peak_115\" \"peak_116\" \"peak_117\" #> [19] \"peak_118\" \"peak_119\" \"peak_120\" \"peak_121\" \"peak_122\" \"peak_123\" #> [25] \"peak_124\" \"peak_125\" #>  #> [[2]] #>  [1] \"peak_183\" \"peak_184\" \"peak_185\" \"peak_186\" \"peak_187\" \"peak_188\" #>  [7] \"peak_189\" \"peak_190\" \"peak_191\" \"peak_192\" \"peak_193\" \"peak_194\" #> [13] \"peak_195\" \"peak_196\" \"peak_197\" \"peak_198\" \"peak_199\" \"peak_200\" #> [19] \"peak_201\" \"peak_202\" \"peak_203\" \"peak_204\" \"peak_205\" \"peak_206\" #> [25] \"peak_207\" \"peak_208\" \"peak_209\" \"peak_210\" \"peak_211\" \"peak_212\" #> [31] \"peak_213\" \"peak_214\" \"peak_215\" \"peak_216\" \"peak_217\" \"peak_218\" #> [37] \"peak_219\" \"peak_220\" \"peak_221\" \"peak_222\" \"peak_223\" \"peak_224\" #> [43] \"peak_225\" \"peak_226\" \"peak_227\" \"peak_228\" \"peak_229\" \"peak_230\" #> [49] \"peak_231\" \"peak_232\" \"peak_233\" \"peak_234\" \"peak_235\" \"peak_236\" #> [55] \"peak_237\" \"peak_238\" \"peak_239\" \"peak_240\" #>"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getPeakDistances.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute distance between peaks — getPeakDistances","title":"Compute distance between peaks — getPeakDistances","text":"Given query set genome intervals, report distance others within window","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getPeakDistances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute distance between peaks — getPeakDistances","text":"","code":"getPeakDistances(query, windowSize = 10000)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getPeakDistances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute distance between peaks — getPeakDistances","text":"query GRanges object intervals query windowSize window around interval bp","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getPeakDistances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute distance between peaks — getPeakDistances","text":"pairs peaks within windowSize, report distance","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getPeakDistances.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute distance between peaks — getPeakDistances","text":"smaller window size create covariance matrix faster evaluate, larger windows give better approximation less likely negative eigen value","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getPeakDistances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute distance between peaks — getPeakDistances","text":"","code":"library(GenomicRanges)  query = GRanges(rep('chr1', 5), IRanges(1:5, 1:5))  getPeakDistances( query ) #>    queryHits subjectHits distance #> 1          1           1        0 #> 6          2           1        1 #> 7          2           2        0 #> 11         3           1        2 #> 12         3           2        1 #> 13         3           3        0 #> 16         4           1        3 #> 17         4           2        2 #> 18         4           3        1 #> 19         4           4        0 #> 21         5           1        4 #> 22         5           2        3 #> 23         5           3        2 #> 24         5           4        1 #> 25         5           5        0"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getSubset-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract subset of data points — getSubset","title":"Extract subset of data points — getSubset","text":"Extract subset data points","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getSubset-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract subset of data points — getSubset","text":"","code":"getSubset(fit, query)  # S4 method for epiclust,GRanges getSubset(fit, query)  # S4 method for epiclustList,GRanges getSubset(fit, query)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getSubset-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract subset of data points — getSubset","text":"fit epiclust epiclustList object query GenomicRanges object data points retain","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getSubset-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract subset of data points — getSubset","text":"epiclust epiclustList object","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/getSubset-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract subset of data points — getSubset","text":"","code":"library(GenomicRanges)  data('decorateData')  # Evaluate hierarchical clustering treeList = runOrderedClusteringGenome( simData, simLocation )  #>  Evaluating:chr20           #>   # extract subset of data after clustering  res = getSubset( treeList, simLocation[1:10])"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/get_exon_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Get coordinates of exons — get_exon_coords","title":"Get coordinates of exons — get_exon_coords","text":"Get coordinates exons ENSEMBL database","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/get_exon_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get coordinates of exons — get_exon_coords","text":"","code":"get_exon_coords(ensdb, query, biotypes = c(\"protein_coding\"))"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/get_exon_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get coordinates of exons — get_exon_coords","text":"ensdb ENSEMBL database object like EnsDb.Hsapiens.v86 query GRranges ofject one interval.  \"chr20\" coded \"20\" biotypes gene biotypes return","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/get_exon_coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get coordinates of exons — get_exon_coords","text":"GRanges object exon locations","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/get_exon_coords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get coordinates of exons — get_exon_coords","text":"","code":"library(EnsDb.Hsapiens.v86) #> Loading required package: ensembldb #> Loading required package: GenomicFeatures #> Loading required package: AnnotationDbi #> Loading required package: AnnotationFilter #>  #> Attaching package: 'ensembldb' #> The following object is masked from 'package:stats': #>  #>     filter library(GenomicRanges)   # gene database ensdb = EnsDb.Hsapiens.v86  # interval query = GRanges(\"20\", IRanges(62045027,62164563))  # get GRanges object of exon locations get_exon_coords( ensdb, query)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/ggplot_by_sampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot by subsampling in each bin — ggplot_by_sampling","title":"Plot by subsampling in each bin — ggplot_by_sampling","text":"Plot subsampling bin x-axis","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/ggplot_by_sampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot by subsampling in each bin — ggplot_by_sampling","text":"","code":"ggplot_by_sampling(x, y, N, nbins = 1000)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/ggplot_by_sampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot by subsampling in each bin — ggplot_by_sampling","text":"x x values y y values N number samples nbins number bins x-axis","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/jaccard.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Jaccard index — jaccard","title":"Evaluate Jaccard index — jaccard","text":"Evaluate Jaccard index","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/jaccard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Jaccard index — jaccard","text":"","code":"jaccard(a, b)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/jaccard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Jaccard index — jaccard","text":"set 1 b set 2","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/jaccard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Jaccard index — jaccard","text":"Jaccard index","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/jaccard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate Jaccard index — jaccard","text":"","code":"a = 1:10 b = 5:15 jaccard(a,b) #> [1] 0.4"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/makeImageRect.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert correlation matrix into triangle plot — makeImageRect","title":"Convert correlation matrix into triangle plot — makeImageRect","text":"Adapted LDheatmap","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/makeImageRect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert correlation matrix into triangle plot — makeImageRect","text":"","code":"makeImageRect(nrow, ncol, cols, name, byrow = TRUE)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/makeImageRect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert correlation matrix into triangle plot — makeImageRect","text":"nrow nrow(C) ncol ncol(C) cols entries C converted color name name plot byrow process C row","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/makeImageRect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert correlation matrix into triangle plot — makeImageRect","text":"rectGrob","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotClusterSegments.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot cluster segments — plotClusterSegments","title":"Plot cluster segments — plotClusterSegments","text":"Plot bar segments showing clusters","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotClusterSegments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot cluster segments — plotClusterSegments","text":"","code":"plotClusterSegments(clusterValues)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotClusterSegments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot cluster segments — plotClusterSegments","text":"clusterValues array names cluster entry","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotClusterSegments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot cluster segments — plotClusterSegments","text":"ggplot2 cluster assignments","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotClusterSegments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot cluster segments — plotClusterSegments","text":"","code":"plotClusterSegments(c(rep(1, 5), rep(2,2), rep(3, 4)))"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotCompareCorr.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot two correlation matrices together — plotCompareCorr","title":"Plot two correlation matrices together — plotCompareCorr","text":"Combined plot correlation matricies cases controls","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotCompareCorr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot two correlation matrices together — plotCompareCorr","text":"","code":"plotCompareCorr(   epiSignal,   peakIDs,   testVariable,   cols,   size = 5,   absCorr = FALSE )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotCompareCorr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot two correlation matrices together — plotCompareCorr","text":"epiSignal matrix EList epigentic signal.  Rows features columns samples peakIDs feature names extract rows epiSignal testVariable factor indicating two subsets samples compare cols array color values size size text absCorr show absolute correlations","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotCompareCorr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot two correlation matrices together — plotCompareCorr","text":"ggplot2 combined correlation matrix","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotCompareCorr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot two correlation matrices together — plotCompareCorr","text":"","code":"library(GenomicRanges)  data('decorateData')  # Evaluate hierarchical clsutering treeList = runOrderedClusteringGenome( simData, simLocation )  #>  Evaluating:chr20           #>   # Choose cutoffs and return clusters treeListClusters = createClusters( treeList, method = \"meanClusterSize\", meanClusterSize=c( 10, 20) ) #> Method:meanClusterSize  # Simulate variable to split dataset by set.seed(1) metadata = data.frame( Disease = factor(sample(0:1, ncol(simData), replace=TRUE)))  # get peak ID's from chr1, cluster 1 peakIDs = getFeaturesInCluster( treeListClusters, \"chr1\", 1, \"10\")  # plot comparison of correlation matrices for peaks in peakIDs #  where data is subset by metadata$Disease plotCompareCorr( simData, peakIDs, metadata$Disease) + ggtitle(\"chr1: cluster 1\")"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotCorrDecay.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot correlation delay — plotCorrDecay","title":"Plot correlation delay — plotCorrDecay","text":"Plot correlation delay using subsampling","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotCorrDecay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot correlation delay — plotCorrDecay","text":"","code":"plotCorrDecay(   dfDist,   method = c(\"R\", \"Rsq\"),   xlim = c(10, 1e+06),   n = 100,   outlierQuantile = 0.001,   densityExponent = 0.25 )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotCorrDecay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot correlation delay — plotCorrDecay","text":"dfDist data.frame distance correlation evaluateCorrDecay() method show either R Rsq y-axis xlim min max values x-axis n number equally spaced points density estimated. outlierQuantile show points density less quantile densityExponent color based density^densityExponent","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotCorrDecay.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot correlation delay — plotCorrDecay","text":"Plot correlation versus log10 distance.  Sample equal number points bin along x-axis.","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotCorrDecay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot correlation delay — plotCorrDecay","text":"","code":"library(GenomicRanges) library(ggplot2)  data('decorateData')  # Evaluate hierarchical clustering treeList = runOrderedClusteringGenome( simData, simLocation )  #>  Evaluating:chr20           #>   # Evaluate how correlation between features decays with distance dfDist = evaluateCorrDecay( treeList, simLocation ) #>  chr20       #>   # make plot plotCorrDecay( dfDist ) #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale. #> Scale for x is already present. #> Adding another scale for x, which will replace the existing scale. #> Warning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0. #> ℹ Please use `after_stat(density)` instead. #> ℹ The deprecated feature was likely used in the decorate package. #>   Please report the issue at #>   <https://github.com/DiseaseNeuroGenomics/decorate/issues>. #> Warning: Removed 23 rows containing non-finite values (`stat_density2d()`). #> `geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")' #> Warning: Removed 23 rows containing non-finite values (`stat_smooth()`). #> Warning: Removed 396 rows containing missing values (`geom_tile()`). #> Warning: Removed 15 rows containing missing values (`geom_point()`)."},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotCorrTriangle.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot triangle of correlation matrix — plotCorrTriangle","title":"Plot triangle of correlation matrix — plotCorrTriangle","text":"Plot lower triangle correlation matrix","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotCorrTriangle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot triangle of correlation matrix — plotCorrTriangle","text":"","code":"plotCorrTriangle(   C,   size = 1,   stroke = 1.5,   cols = c(\"blue\", \"white\", \"red\"),   absCorr = FALSE )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotCorrTriangle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot triangle of correlation matrix — plotCorrTriangle","text":"C correlation matrix size plotting argument geom_point() stroke plotting argument geom_point() cols array two colors gradient absCorr show absolute correlations","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotCorrTriangle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot triangle of correlation matrix — plotCorrTriangle","text":"ggplot2 plot correlation matrix","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotCorrTriangle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot triangle of correlation matrix — plotCorrTriangle","text":"Adjust size stroke points plot fix look plot depending dimensions","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotCorrTriangle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot triangle of correlation matrix — plotCorrTriangle","text":"","code":"N = 1000 p = 100 X = matrix(rnorm(N*p), N,p) C = cor(X) plotCorrTriangle( C )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotDecorate.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot decorate analysis — plotDecorate","title":"Plot decorate analysis — plotDecorate","text":"Plot decorate analysis clusters correlations","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotDecorate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot decorate analysis — plotDecorate","text":"","code":"plotDecorate(   ensdb,   treeList,   treeListClusters,   featurePositions,   query,   data,   cols,   showGenes = TRUE,   splice_variants = FALSE,   non_coding = FALSE,   absCorr = FALSE,   method.corr = c(\"pearson\", \"kendall\", \"spearman\") )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotDecorate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot decorate analysis — plotDecorate","text":"ensdb ENSEMBL database object like EnsDb.Hsapiens.v86 treeList hierarchical clustering chromosome runOrderedClusteringGenome() treeListClusters assign regions clusters cutting tree createClusters() featurePositions GRanges object storing location feature query GRanges object indiecating region plot data data compute correlations stratified testVariable cols array color values showGenes plot genes splice_variants TRUE, show multiple transcripts gene non_coding TRUE, also show non-coding genes absCorr show absolute correlations method.corr data specified, compute correlation using: \"pearson\", \"kendall\", \"spearman\"","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotDecorate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot decorate analysis — plotDecorate","text":"ggplot2 cluster assignments correlation peaks","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotDecorate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot decorate analysis — plotDecorate","text":"","code":"library(GenomicRanges) library(EnsDb.Hsapiens.v86)  # load data data('decorateData')  # load gene locations ensdb = EnsDb.Hsapiens.v86  # Evaluate hierarchical clsutering treeList = runOrderedClusteringGenome( simData, simLocation )  #>  Evaluating:chr20           #>   # Choose cutoffs and return clusters treeListClusters = createClusters( treeList, method='meanClusterSize', meanClusterSize=30)  #> Method:meanClusterSize  # Plot correlations and clusters in region defined by query query = range(simLocation)  plotDecorate( ensdb, treeList, treeListClusters, simLocation, query)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotDensityPoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot density as color, add outlier points — plotDensityPoints","title":"Plot density as color, add outlier points — plotDensityPoints","text":"Plot density color, add outlier points","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotDensityPoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot density as color, add outlier points — plotDensityPoints","text":"","code":"plotDensityPoints(   x,   y,   n = 100,   outlierQuantile = 1e-05,   densityExponent = 0.25 )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotDensityPoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot density as color, add outlier points — plotDensityPoints","text":"x x values y y values n number equally spaced points density estimated. outlierQuantile show points density less quantile densityExponent color based density^densityExponent","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotDensityPoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot density as color, add outlier points — plotDensityPoints","text":"","code":"x = rnorm(10000) y = rnorm(10000)  plotDensityPoints( x, y)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotEnsGenes.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ENSEMBL genes — plotEnsGenes","title":"Plot ENSEMBL genes — plotEnsGenes","text":"Plot ENSEMBL genes region","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotEnsGenes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ENSEMBL genes — plotEnsGenes","text":"","code":"plotEnsGenes(   ensdb,   minRange,   maxRange,   chromosome,   plot_lines_distance = 0.03,   vp = viewport(x = 0, y = 0.95, just = c(\"left\", \"top\")),   splice_variants = TRUE,   non_coding = TRUE )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotEnsGenes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ENSEMBL genes — plotEnsGenes","text":"ensdb ENSEMBL database object like EnsDb.Hsapiens.v86 minRange start genome coordinate maxRange end genome coordinate chromosome chrom plot_lines_distance veritcal distance genes vp viewport splice_variants TRUE, show multiple transcripts gene non_coding TRUE, also show non-coding genes","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotEnsGenes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ENSEMBL genes — plotEnsGenes","text":"GRanges object exon locations","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotEnsGenes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ENSEMBL genes — plotEnsGenes","text":"","code":"library(EnsDb.Hsapiens.v86) library(GenomicRanges)  library(grid)   # gene database ensdb = EnsDb.Hsapiens.v86  # interval query = GRanges(\"20\", IRanges(62045027,62164563))  # plot genes fig = plotEnsGenes( ensdb, start(query), end(query), seqnames(query)) grid.draw( fig )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotGenes.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot genes from a specified region of the human genome. — plotGenes","title":"Plot genes from a specified region of the human genome. — plotGenes","text":"Retrieves genes UCSC Genome Browser generate genes plot.","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotGenes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot genes from a specified region of the human genome. — plotGenes","text":"","code":"plotGenes(minRange, maxRange, chromosome, genome = \"hg19\", plot_lines_distance = 0.03, vp = viewport(x = 0, y = 0.99, just = c(\"left\", \"top\")), splice_variants = TRUE, non_coding = TRUE)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotGenes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot genes from a specified region of the human genome. — plotGenes","text":"minRange sequence minimum range base pairs. maxRange sequence maximum range base pairs. chromosome character string identifying chromosome. genome genome assembly use. default hg19, recent human genome assembly UCSC genome browser. plot_lines_distance distance lines genes plotted. vp viewport. splice_variants FALSE, exclude gene splice variants. non_coding FALSE, exclude non-coding genes.","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotGenes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot genes from a specified region of the human genome. — plotGenes","text":"grob gene plots.","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotGenes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot genes from a specified region of the human genome. — plotGenes","text":"genes color coded follows: Black -- feature corresponding entry Protein Data Bank (PDB) Dark blue -- transcript reviewed validated either RefSeq, SwissProt CCDS staff Medium blue -- RefSeq transcripts Light blue -- non-RefSeq transcripts assemblies older hg18, genes plotted grey.","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotGenes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot genes from a specified region of the human genome. — plotGenes","text":"http://genome.ucsc.edu/cgi-bin/hgTrackUi?g=knownGene","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotGenes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot genes from a specified region of the human genome. — plotGenes","text":"Sigal Blay <sblay@sfu.ca> ","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotGenes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot genes from a specified region of the human genome. — plotGenes","text":"","code":"if (FALSE) { grid.newpage() plotGenes(149500000, 150000000, \"chr7\") }"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotPairwiseScatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatter plot of all pairs of variables stratified by test variable — plotPairwiseScatter","title":"Scatter plot of all pairs of variables stratified by test variable — plotPairwiseScatter","text":"Make scatterplot pair variables X Y.  Dataset divided two based value testVariable","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotPairwiseScatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatter plot of all pairs of variables stratified by test variable — plotPairwiseScatter","text":"","code":"plotPairwiseScatter(   X,   Y,   testVariable,   size = 1,   cols = c(\"#00ff40\", \"deepskyblue\"),   axisLabels = c(\"show\", \"internal\", \"none\"),   title = NULL,   xlab = NULL,   ylab = NULL )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotPairwiseScatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatter plot of all pairs of variables stratified by test variable — plotPairwiseScatter","text":"X data.frame variables Y data.frame variables testVariable factor indicating two subsets samples compare size size points cols color label samples two levels testVariable axisLabels either \"show\" display axisLabels, \"internal\" labels  diagonal plots, \"none\" axis labels title title xlab xlab ylab xlab","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotPairwiseScatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scatter plot of all pairs of variables stratified by test variable — plotPairwiseScatter","text":"ggplot2 combined pairwise scatter plots","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotScatterPairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatter plot of all pairs of variables stratified by test variable — plotScatterPairs","title":"Scatter plot of all pairs of variables stratified by test variable — plotScatterPairs","text":"Scatter plot pairs variables stratified test variable","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotScatterPairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatter plot of all pairs of variables stratified by test variable — plotScatterPairs","text":"","code":"plotScatterPairs(epiSignal, peakIDs, testVariable, size = 1)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotScatterPairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatter plot of all pairs of variables stratified by test variable — plotScatterPairs","text":"epiSignal matrix EList epigentic signal.  Rows features columns samples peakIDs feature names extract rows epiSignal testVariable factor indicating two subsets samples compare size size points","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotScatterPairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scatter plot of all pairs of variables stratified by test variable — plotScatterPairs","text":"ggplot2 combined pairwise scatter plots","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/plotScatterPairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scatter plot of all pairs of variables stratified by test variable — plotScatterPairs","text":"","code":"library(GenomicRanges)  data('decorateData')  # Evaluate hierarchical clsutering treeList = runOrderedClusteringGenome( simData, simLocation )  #>  Evaluating:chr20           #>   # Choose cutoffs and return clusters treeListClusters = createClusters( treeList, method = \"meanClusterSize\", meanClusterSize=c(10, 30) ) #> Method:meanClusterSize  # get peak ID's from chr1, cluster 1 peakIDs = getFeaturesInCluster( treeListClusters, \"chr20\", 2, \"30\")  # plot comparison of correlation matrices for peaks in peakIDs #  where data is subset by metadata$Disease plotScatterPairs( simData, peakIDs, metadata$Disease) + ggtitle(\"chr20: cluster 1\") #>  #>  plot: [1,1] [--------------------------------------------------]  1% est: 0s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [1,2] [>-------------------------------------------------]  1% est: 7s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [1,3] [>-------------------------------------------------]  2% est: 7s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [1,4] [>-------------------------------------------------]  3% est: 7s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [1,5] [=>------------------------------------------------]  3% est: 7s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [1,6] [=>------------------------------------------------]  4% est: 7s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [1,7] [=>------------------------------------------------]  5% est: 7s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [1,8] [==>-----------------------------------------------]  6% est: 7s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [1,9] [==>-----------------------------------------------]  6% est: 7s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [1,10] [==>----------------------------------------------]  7% est: 7s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [1,11] [===>---------------------------------------------]  8% est: 7s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [1,12] [===>---------------------------------------------]  8% est: 7s  #>  #>  plot: [2,1] [====>---------------------------------------------]  9% est: 6s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [2,2] [====>---------------------------------------------] 10% est: 6s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [2,3] [====>---------------------------------------------] 10% est: 6s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [2,4] [=====>--------------------------------------------] 11% est: 6s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [2,5] [=====>--------------------------------------------] 12% est: 6s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [2,6] [=====>--------------------------------------------] 12% est: 6s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [2,7] [======>-------------------------------------------] 13% est: 6s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [2,8] [======>-------------------------------------------] 14% est: 6s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [2,9] [======>-------------------------------------------] 15% est: 6s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [2,10] [======>------------------------------------------] 15% est: 6s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [2,11] [=======>-----------------------------------------] 16% est: 6s  #>  #>  plot: [2,12] [=======>-----------------------------------------] 17% est: 6s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [3,1] [========>-----------------------------------------] 17% est: 6s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [3,2] [========>-----------------------------------------] 18% est: 6s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [3,3] [========>-----------------------------------------] 19% est: 6s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [3,4] [=========>----------------------------------------] 19% est: 6s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [3,5] [=========>----------------------------------------] 20% est: 6s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [3,6] [=========>----------------------------------------] 21% est: 6s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [3,7] [==========>---------------------------------------] 22% est: 6s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [3,8] [==========>---------------------------------------] 22% est: 6s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [3,9] [==========>---------------------------------------] 23% est: 5s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [3,10] [===========>-------------------------------------] 24% est: 5s  #>  #>  plot: [3,11] [===========>-------------------------------------] 24% est: 5s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [3,12] [===========>-------------------------------------] 25% est: 5s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [4,1] [============>-------------------------------------] 26% est: 5s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [4,2] [============>-------------------------------------] 26% est: 5s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [4,3] [=============>------------------------------------] 27% est: 5s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [4,4] [=============>------------------------------------] 28% est: 5s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [4,5] [=============>------------------------------------] 28% est: 5s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [4,6] [==============>-----------------------------------] 29% est: 5s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [4,7] [==============>-----------------------------------] 30% est: 5s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [4,8] [==============>-----------------------------------] 31% est: 5s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [4,9] [===============>----------------------------------] 31% est: 5s  #>  #>  plot: [4,10] [===============>---------------------------------] 32% est: 5s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [4,11] [===============>---------------------------------] 33% est: 5s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [4,12] [===============>---------------------------------] 33% est: 5s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [5,1] [================>---------------------------------] 34% est: 5s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [5,2] [================>---------------------------------] 35% est: 5s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [5,3] [=================>--------------------------------] 35% est: 5s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [5,4] [=================>--------------------------------] 36% est: 5s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [5,5] [=================>--------------------------------] 37% est: 5s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [5,6] [==================>-------------------------------] 38% est: 4s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [5,7] [==================>-------------------------------] 38% est: 4s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [5,8] [==================>-------------------------------] 39% est: 4s  #>  #>  plot: [5,9] [===================>------------------------------] 40% est: 4s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [5,10] [===================>-----------------------------] 40% est: 4s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [5,11] [===================>-----------------------------] 41% est: 4s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [5,12] [===================>-----------------------------] 42% est: 4s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [6,1] [====================>-----------------------------] 42% est: 4s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [6,2] [=====================>----------------------------] 43% est: 4s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [6,3] [=====================>----------------------------] 44% est: 4s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [6,4] [=====================>----------------------------] 44% est: 4s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [6,5] [======================>---------------------------] 45% est: 4s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [6,6] [======================>---------------------------] 46% est: 4s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [6,7] [======================>---------------------------] 47% est: 4s  #>  #>  plot: [6,8] [=======================>--------------------------] 47% est: 4s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [6,9] [=======================>--------------------------] 48% est: 4s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [6,10] [=======================>-------------------------] 49% est: 4s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [6,11] [=======================>-------------------------] 49% est: 4s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [6,12] [=======================>-------------------------] 50% est: 4s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [7,1] [========================>-------------------------] 51% est: 4s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [7,2] [=========================>------------------------] 51% est: 3s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [7,3] [=========================>------------------------] 52% est: 3s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [7,4] [=========================>------------------------] 53% est: 3s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [7,5] [==========================>-----------------------] 53% est: 3s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [7,6] [==========================>-----------------------] 54% est: 3s  #>  #>  plot: [7,7] [==========================>-----------------------] 55% est: 3s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [7,8] [===========================>----------------------] 56% est: 3s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [7,9] [===========================>----------------------] 56% est: 3s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [7,10] [===========================>---------------------] 57% est: 3s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [7,11] [===========================>---------------------] 58% est: 3s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [7,12] [============================>--------------------] 58% est: 3s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [8,1] [=============================>--------------------] 59% est: 3s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [8,2] [=============================>--------------------] 60% est: 3s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [8,3] [=============================>--------------------] 60% est: 3s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [8,4] [==============================>-------------------] 61% est: 3s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [8,5] [==============================>-------------------] 62% est: 3s  #>  #>  plot: [8,6] [==============================>-------------------] 62% est: 3s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [8,7] [===============================>------------------] 63% est: 3s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [8,8] [===============================>------------------] 64% est: 3s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [8,9] [===============================>------------------] 65% est: 3s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [8,10] [===============================>-----------------] 65% est: 2s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [8,11] [===============================>-----------------] 66% est: 2s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [8,12] [================================>----------------] 67% est: 2s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [9,1] [=================================>----------------] 67% est: 2s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [9,2] [=================================>----------------] 68% est: 2s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [9,3] [=================================>----------------] 69% est: 2s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [9,4] [==================================>---------------] 69% est: 2s  #>  #>  plot: [9,5] [==================================>---------------] 70% est: 2s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [9,6] [==================================>---------------] 71% est: 2s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [9,7] [===================================>--------------] 72% est: 2s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [9,8] [===================================>--------------] 72% est: 2s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [9,9] [===================================>--------------] 73% est: 2s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [9,10] [===================================>-------------] 74% est: 2s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [9,11] [===================================>-------------] 74% est: 2s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [9,12] [====================================>------------] 75% est: 2s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [10,1] [====================================>------------] 76% est: 2s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [10,2] [====================================>------------] 76% est: 2s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [10,3] [=====================================>-----------] 77% est: 2s  #>  #>  plot: [10,4] [=====================================>-----------] 78% est: 2s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [10,5] [=====================================>-----------] 78% est: 2s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [10,6] [======================================>----------] 79% est: 1s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [10,7] [======================================>----------] 80% est: 1s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [10,8] [======================================>----------] 81% est: 1s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [10,9] [=======================================>---------] 81% est: 1s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [10,10] [======================================>---------] 82% est: 1s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [10,11] [=======================================>--------] 83% est: 1s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [10,12] [=======================================>--------] 83% est: 1s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [11,1] [========================================>--------] 84% est: 1s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [11,2] [=========================================>-------] 85% est: 1s  #>  #>  plot: [11,3] [=========================================>-------] 85% est: 1s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [11,4] [=========================================>-------] 86% est: 1s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [11,5] [==========================================>------] 87% est: 1s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [11,6] [==========================================>------] 88% est: 1s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [11,7] [==========================================>------] 88% est: 1s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [11,8] [===========================================>-----] 89% est: 1s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [11,9] [===========================================>-----] 90% est: 1s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [11,10] [==========================================>-----] 90% est: 1s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [11,11] [===========================================>----] 91% est: 1s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [11,12] [===========================================>----] 92% est: 1s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [12,1] [============================================>----] 92% est: 1s  #>  #>  plot: [12,2] [=============================================>---] 93% est: 0s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [12,3] [=============================================>---] 94% est: 0s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [12,4] [=============================================>---] 94% est: 0s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [12,5] [==============================================>--] 95% est: 0s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [12,6] [==============================================>--] 96% est: 0s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [12,7] [==============================================>--] 97% est: 0s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [12,8] [===============================================>-] 97% est: 0s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [12,9] [===============================================>-] 98% est: 0s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [12,10] [==============================================>-] 99% est: 0s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [12,11] [===============================================>] 99% est: 0s  #> `geom_smooth()` using formula = 'y ~ x' #>  #>  plot: [12,12] [================================================]100% est: 0s  #>                                                                                 #>  #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/retainClusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Retain clusters by applying filter — retainClusters","title":"Retain clusters by applying filter — retainClusters","text":"Retain clusters applying filter","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/retainClusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retain clusters by applying filter — retainClusters","text":"","code":"retainClusters(clstScore, metric = \"LEF\", cutoff = 0.4)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/retainClusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retain clusters by applying filter — retainClusters","text":"clstScore score cluster using scoreClusters() metric column clstScore use filtering cutoff retain cluster exceed cutoff metric.  Can array one entry per entry clstScore","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/retainClusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retain clusters by applying filter — retainClusters","text":"data.frame chrom, clutser, id (clustering parameter value), specified metric","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/retainClusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retain clusters by applying filter — retainClusters","text":"","code":"library(GenomicRanges) library(BiocParallel)  data('decorateData')  # Evaluate hierarchical clustering treeList = runOrderedClusteringGenome( simData, simLocation )  #>  Evaluating:chr20           #>   # Choose cutoffs and return clusters treeListClusters = createClusters( treeList ) #> Method:capushe  # Evaluate score for each cluster clstScore = scoreClusters(treeList, treeListClusters, BPPARAM = SerialParam() ) #> Evaluating strength of each cluster... #>  #> Dividing work into 1 chunks...  # Retain clusters that pass this criteria clustInclude = retainClusters( clstScore, \"LEF\", 0.30 ) #> Using cutoffs: #> Cluster set\tcutoff #>  0.15\t\t0.3 #>   # Or filter by mean absolute correlation # clustInclude = retainClusters( clstScore, \"mean_abs_corr\", 0.1 )  # get retained clusters treeListClusters_filter = filterClusters( treeListClusters, clustInclude )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/runFastStat.html","id":null,"dir":"Reference","previous_headings":"","what":"Test difference in correlation using closed form tests — runFastStat","title":"Test difference in correlation using closed form tests — runFastStat","text":"Test difference correlation using closed form tests","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/runFastStat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test difference in correlation using closed form tests — runFastStat","text":"","code":"runFastStat(   itObj,   method = c(\"Box\", \"Box.permute\", \"Steiger.fisher\", \"Steiger\", \"Jennrich\", \"Factor\",     \"Mann.Whitney\", \"Kruskal.Wallis\", \"Cai.max\", \"Chang.maxBoot\", \"LC.U\", \"WL.randProj\",     \"Schott.Frob\", \"Delaneau\", \"deltaSLE\"),   method.corr = c(\"pearson\", \"kendall\", \"spearman\") )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/runFastStat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test difference in correlation using closed form tests — runFastStat","text":"itObj iterator method Specify test: \"Box\", \"Box.permute\", Steiger.fisher\", \"Steiger\", \"Jennrich\", \"Factor\" \"Mann.Whitney\", \"Kruskal.Wallis\", \"Cai.max\", \"Chang.maxBoot\", \"LC.U\", \"WL.randProj\", \"Schott.Frob\" method.corr Specify type correlation: \"pearson\", \"kendall\", \"spearman\"","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/runOrderedClustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Run hierarchical clustering preserving order — runOrderedClustering","title":"Run hierarchical clustering preserving order — runOrderedClustering","text":"Run hierarchical clustering preserving sequential order entries","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/runOrderedClustering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run hierarchical clustering preserving order — runOrderedClustering","text":"","code":"runOrderedClustering(X, gr, alpha = 0.5)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/runOrderedClustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run hierarchical clustering preserving order — runOrderedClustering","text":"X data matrix *rows* features sequential order gr GenomicRanges object corresponding rows X alpha mixture parameter weigting correlations (alpha=0) versus chromosome distances (alpha=1)","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/runOrderedClustering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run hierarchical clustering preserving order — runOrderedClustering","text":"hclust tree","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/runOrderedClustering.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run hierarchical clustering preserving order — runOrderedClustering","text":"Use hclustgeo ClustGeo package generate hierarchical clustering preserves sequential order. Chavent, et al. 2017. ClustGeo: R package hierarchical clustering spatial constraints. arXiv:1707.03897v2 doi:10.1007/s00180-018-0791-1","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/runOrderedClustering.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run hierarchical clustering preserving order — runOrderedClustering","text":"","code":"library(GenomicRanges) library(EnsDb.Hsapiens.v86)  # load data data('decorateData')  # load gene locations ensdb = EnsDb.Hsapiens.v86  # Evaluate hierarchical clustering treeList = runOrderedClusteringGenome( simData, simLocation )  #>  Evaluating:chr20           #>   # Choose cutoffs and return clusters treeListClusters = createClusters( treeList ) #> Method:capushe  # Plot correlations and clusters in region defined by query query = range(simLocation)  plotDecorate( ensdb, treeList, treeListClusters, simLocation, query)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/runOrderedClusteringGenome.html","id":null,"dir":"Reference","previous_headings":"","what":"Run hierarchical clustering preserving order — runOrderedClusteringGenome","title":"Run hierarchical clustering preserving order — runOrderedClusteringGenome","text":"Run hierarchical clustering preserving sequential order entries","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/runOrderedClusteringGenome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run hierarchical clustering preserving order — runOrderedClusteringGenome","text":"","code":"runOrderedClusteringGenome(   X,   gr,   method = c(\"adjclust\", \"hclustgeo\"),   quiet = FALSE,   alpha = 0.5,   adjacentCount = 500,   setNANtoZero = FALSE,   method.corr = c(\"pearson\", \"spearman\") )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/runOrderedClusteringGenome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run hierarchical clustering preserving order — runOrderedClusteringGenome","text":"X data matrix *rows* features sequential order gr GenomicRanges object entries corresponding *rows* X method 'adjclust': adjacency constrained clustering.  'hclustgeo': incorporate data correlation distance bp quiet suppress messages alpha use 'hclustgeo': mixture parameter weighing correlations (alpha=0) versus chromosome distances (alpha=1) adjacentCount used 'adjclust': number adjacent entries compute correlation setNANtoZero replace NAN correlation values zero method.corr Specify type correlation: \"pearson\", \"kendall\", \"spearman\"","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/runOrderedClusteringGenome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run hierarchical clustering preserving order — runOrderedClusteringGenome","text":"list hclust tree, one entry chromosome","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/runOrderedClusteringGenome.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run hierarchical clustering preserving order — runOrderedClusteringGenome","text":"Use adjacency constrained clustering adjclust package: Alia Dehman, Christophe Ambroise Pierre Neuvial. 2015. Performance blockwise approach variable selection using linkage disequilibrium information. BMC Bioinformatics 16:148 doi.org:10.1186/s12859-015-0556-6 , use hclustgeo ClustGeo package generate hierarchical clustering roughly preserves sequential order. Chavent, et al. 2017. ClustGeo: R package hierarchical clustering spatial constraints. arXiv:1707.03897v2 doi:10.1007/s00180-018-0791-1","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/runOrderedClusteringGenome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run hierarchical clustering preserving order — runOrderedClusteringGenome","text":"","code":"library(GenomicRanges) library(EnsDb.Hsapiens.v86)  # load data data('decorateData')  # load gene locations ensdb = EnsDb.Hsapiens.v86  # Evaluate hierarchical clustering treeList = runOrderedClusteringGenome( simData, simLocation )  #>  Evaluating:chr20           #>   # Choose cutoffs and return clusters treeListClusters = createClusters( treeList ) #> Method:capushe  # Plot correlations and clusters in region defined by query query = range(simLocation)  plotDecorate( ensdb, treeList, treeListClusters, simLocation, query)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/runPermutedData.html","id":null,"dir":"Reference","previous_headings":"","what":"Run hierarchical clustering permuting features — runPermutedData","title":"Run hierarchical clustering permuting features — runPermutedData","text":"Run hierarchical clustering permuting features get statistics null","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/runPermutedData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run hierarchical clustering permuting features — runPermutedData","text":"","code":"runPermutedData(   X,   gr,   method = c(\"adjclust\", \"hclustgeo\"),   quiet = FALSE,   alpha = 0.5,   adjacentCount = 500,   setNANtoZero = FALSE,   method.corr = c(\"pearson\", \"spearman\"),   meanClusterSize = c(5, 10) )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/runPermutedData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run hierarchical clustering permuting features — runPermutedData","text":"X data matrix *rows* features sequential order gr GenomicRanges object entries corresponding *rows* X method 'adjclust': adjacency constrained clustering.  'hclustgeo': incorporate data correlation distance bp quiet suppress messages alpha use 'hclustgeo': mixture parameter weighing correlations (alpha=0) versus chromosome distances (alpha=1) adjacentCount used 'adjclust': number adjacent entries compute correlation setNANtoZero replace NAN correlation values zero method.corr Specify type correlation: \"pearson\", \"kendall\", \"spearman\" meanClusterSize select target mean cluster size.  Can array values","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/runPermutedData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run hierarchical clustering permuting features — runPermutedData","text":"list clusterScores cutoff values 5","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/runPermutedData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run hierarchical clustering permuting features — runPermutedData","text":"","code":"library(GenomicRanges)  # load data data('decorateData')  # First, analysis of original data # Evaluate hierarchical clustering treeList = runOrderedClusteringGenome( simData, simLocation )  #>  Evaluating:chr20           #>   # Choose cutoffs and return clusters treeListClusters = createClusters( treeList, method='meanClusterSize', meanClusterSize=c(5, 10) ) #> Method:meanClusterSize  # Evaluate score for each cluster clstScore = scoreClusters(treeList, treeListClusters ) #> Evaluating strength of each cluster... #>  #> Dividing work into 2 chunks...  # Then, analysis of permuted data # Evaluate hierarchical clustering res = runPermutedData( simData, simLocation, meanClusterSize=c(5, 10)  )  #>  Evaluating:chr20           #>  #> Method:meanClusterSize #> Evaluating strength of each cluster... #>  #> Dividing work into 2 chunks...  # LEF values for permuted data at 5% false positive rate res$cutoffs$LEF #> [1] 0.10710201 0.07609162  # Retain clusters that pass this criteria clustInclude = retainClusters( clstScore, \"LEF\", res$cutoffs$LEF ) #> Using cutoffs: #> Cluster set\tcutoff #>  5\t\t0.107 #>  10\t\t0.0761 #>"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/sLEDresults-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class that stores results of sLED analysis — sLEDresults-class","title":"An S4 class that stores results of sLED analysis — sLEDresults-class","text":"S4 class stores results sLED analysis","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/sLEDresults-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class that stores results of sLED analysis — sLEDresults-class","text":".Data list sLED results","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/scoreClusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute scores for each cluster — scoreClusters","title":"Compute scores for each cluster — scoreClusters","text":"cluster compute summary statistics cluster measure strong correlation structure .  Clusters weak correlation structure can dropped downstream analysis.","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/scoreClusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute scores for each cluster — scoreClusters","text":"","code":"scoreClusters(treeList, treeListClusters, BPPARAM = SerialParam())"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/scoreClusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute scores for each cluster — scoreClusters","text":"treeList list hclust objects treeListClusters createClusters() BPPARAM parameters parallel evaluation","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/scoreClusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute scores for each cluster — scoreClusters","text":"pairs peaks within windowSize, report distance","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/scoreClusters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute scores for each cluster — scoreClusters","text":"cluster, extract correlation matrix return mean absolute correlation; 75th, 90th 95th quantile absolute correlation, LEF, leading eigen-value fraction fraction variance explained leading eigen value matrix abs(C).","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/scoreClusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute scores for each cluster — scoreClusters","text":"","code":"library(GenomicRanges) library(BiocParallel)  data('decorateData')  # Evaluate hierarchical clustering treeList = runOrderedClusteringGenome( simData, simLocation )  #>  Evaluating:chr20           #>   # Choose cutoffs and return clusters treeListClusters = createClusters( treeList ) #> Method:capushe  # Evaluate score for each cluster clstScore = scoreClusters(treeList, treeListClusters, BPPARAM = SerialParam() ) #> Evaluating strength of each cluster... #>  #> Dividing work into 1 chunks..."},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/sle.score.html","id":null,"dir":"Reference","previous_headings":"","what":"Score impact of each sample on sparse leading eigen-value — sle.score","title":"Score impact of each sample on sparse leading eigen-value — sle.score","text":"Score impact sample sparse leading eigen-value.  Compute correlation using samples (.e. C), compute correlation omitting sample (.e. Ci).  score sample based sparse leading eigen-value diffrence C Ci.","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/sle.score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score impact of each sample on sparse leading eigen-value — sle.score","text":"","code":"sle.score(   Y,   method = c(\"pearson\", \"kendall\", \"spearman\"),   rho = 0.05,   sumabs = 1 )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/sle.score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score impact of each sample on sparse leading eigen-value — sle.score","text":"Y data matrix samples rows variables columns method specify correlation method: \"pearson\", \"kendall\" \"spearman\" rho positive constant cor(Y) + diag(rep(rho,p)) positive definite. sumabs regularization paramter. Value 1 gives regularization, sumabs*sqrt(p) upperbound L_1 norm v,controling sparsity solution. Must 1/sqrt(p) 1.","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/sle.score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score impact of each sample on sparse leading eigen-value — sle.score","text":"score sample measure impact correlation structure","code":""},{"path":[]},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/sle.score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Score impact of each sample on sparse leading eigen-value — sle.score","text":"","code":"# load iris data data(iris)  # Evalaute score on each sample sle.score( iris[,1:4] ) #>            1            2            3            4            5            6  #> 0.0100508501 0.0063532005 0.0040422346 0.0035951853 0.0132116072 0.0125309552  #>            7            8            9           10           11           12  #> 0.0100934398 0.0082490593 0.0114693323 0.0032052360 0.0122602163 0.0093574036  #>           13           14           15           16           17           18  #> 0.0070555663 0.0088254694 0.0184610609 0.0146444218 0.0144360540 0.0097520909  #>           19           20           21           22           23           24  #> 0.0118698471 0.0155046106 0.0061783969 0.0131563750 0.0169579645 0.0047634522  #>           25           26           27           28           29           30  #> 0.0090398155 0.0056904038 0.0077634331 0.0092150805 0.0069066487 0.0039830882  #>           31           32           33           34           35           36  #> 0.0031741402 0.0058447528 0.0203620157 0.0184108094 0.0030292459 0.0028027419  #>           37           38           39           40           41           42  #> 0.0089979730 0.0144614375 0.0076171795 0.0075813407 0.0105486832 0.0391144133  #>           43           44           45           46           47           48  #> 0.0043555698 0.0090955256 0.0139203037 0.0062276312 0.0159334491 0.0042216347  #>           49           50           51           52           53           54  #> 0.0124391046 0.0056051298 0.0062012259 0.0025538913 0.0027379404 0.0077974686  #>           55           56           57           58           59           60  #> 0.0031339724 0.0019131283 0.0048033019 0.0168761145 0.0026469713 0.0063139558  #>           61           62           63           64           65           66  #> 0.0270335216 0.0003607039 0.0095555803 0.0010817355 0.0011013864 0.0022526040  #>           67           68           69           70           71           72  #> 0.0022366774 0.0025516518 0.0041880468 0.0050152029 0.0037346124 0.0010691602  #>           73           74           75           76           77           78  #> 0.0050958706 0.0020457400 0.0017485637 0.0012400943 0.0048936187 0.0007369925  #>           79           80           81           82           83           84  #> 0.0009470987 0.0045808930 0.0076575464 0.0086515896 0.0011598561 0.0033769991  #>           85           86           87           88           89           90  #> 0.0040138952 0.0053708319 0.0017749569 0.0058275110 0.0010149180 0.0051076748  #>           91           92           93           94           95           96  #> 0.0044393934 0.0003113556 0.0017605131 0.0181676043 0.0023235321 0.0006398017  #>           97           98           99          100          101          102  #> 0.0009850551 0.0010481157 0.0118987312 0.0010920772 0.0139253836 0.0055572820  #>          103          104          105          106          107          108  #> 0.0026698326 0.0018311742 0.0016102118 0.0034648797 0.0183216541 0.0038243309  #>          109          110          111          112          113          114  #> 0.0112190900 0.0320116383 0.0054984010 0.0057990997 0.0022704649 0.0092346175  #>          115          116          117          118          119          120  #> 0.0089619798 0.0073418013 0.0012511391 0.0473107730 0.0183510194 0.0034704520  #>          121          122          123          124          125          126  #> 0.0093238498 0.0071416694 0.0081656016 0.0046067168 0.0110746046 0.0081178997  #>          127          128          129          130          131          132  #> 0.0028699817 0.0005083525 0.0043144966 0.0031497198 0.0071068499 0.0458246032  #>          133          134          135          136          137          138  #> 0.0042239870 0.0028311575 0.0055666365 0.0029206057 0.0157660466 0.0027558203  #>          139          140          141          142          143          144  #> 0.0009196381 0.0044974112 0.0052033499 0.0049786976 0.0055572820 0.0094222000  #>          145          146          147          148          149          150  #> 0.0132687311 0.0026642950 0.0071995856 0.0013516828 0.0141944453 0.0020270562"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/sle.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test association between sparse leading eigen-value and variable — sle.test","title":"Test association between sparse leading eigen-value and variable — sle.test","text":"Score impact sample sparse leading eigen-value peform test association variable using non-parametric test","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/sle.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test association between sparse leading eigen-value and variable — sle.test","text":"","code":"sle.test(   Y,   variable,   method = c(\"pearson\", \"kendall\", \"spearman\"),   rho = 0,   sumabs = 1 )"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/sle.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test association between sparse leading eigen-value and variable — sle.test","text":"Y data matrix samples rows variables columns variable variable number entries must equal nrow(Y).  Can discrete continuous. method specify correlation method: \"pearson\", \"kendall\" \"spearman\" rho positive constant cor(Y) + diag(rep(rho,p)) positive definite. sumabs regularization paramter. Value 1 gives regularization, sumabs*sqrt(p) upperbound L_1 norm v,controling sparsity solution. Must 1/sqrt(p) 1.","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/sle.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test association between sparse leading eigen-value and variable — sle.test","text":"list p-value, estimate method used","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/sle.test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test association between sparse leading eigen-value and variable — sle.test","text":"statistical test used depends variable specified. variable factor multiple levels, use Kruskal-Wallis test variable factor 2 levels, use Wilcoxon test variable continuous, use Wilcoxon test","code":""},{"path":[]},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/sle.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test association between sparse leading eigen-value and variable — sle.test","text":"","code":"# load iris data data(iris)  # variable is factor with multiple levels # use kruskal.test sle.test( iris[,1:4], iris[,5] ) #> $p.value #> [1] 1.604944e-08 #>  #> $estimate #> Kruskal-Wallis chi-squared  #>                   35.89518  #>  #> $method #> [1] \"kruskal.test\" #>   # variable is factor with 2 levels # use wilcox.test sle.test( iris[1:100,1:4], iris[1:100,5] ) #> $p.value #> [1] 0.7329198 #>  #> $estimate #> [1] -0.0005423853 #>  #> $method #> [1] \"wilcox.test\" #>   # variable is continuous # use cor.test with spearman sle.test( iris[,1:4], iris[,1] ) #> $p.value #> [1] 0.000519093 #>  #> $estimate #>       rho  #> -0.280033  #>  #> $method #> [1] \"cor.test\" #>"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/sub-epiclustDiscreteListContain-ANY-ANY-ANY-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Allow subsetting of epiclustDiscreteListContain — [,epiclustDiscreteListContain,ANY,ANY,ANY-method","title":"Allow subsetting of epiclustDiscreteListContain — [,epiclustDiscreteListContain,ANY,ANY,ANY-method","text":"Allow subsetting epiclustDiscreteListContain","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/sub-epiclustDiscreteListContain-ANY-ANY-ANY-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allow subsetting of epiclustDiscreteListContain — [,epiclustDiscreteListContain,ANY,ANY,ANY-method","text":"","code":"# S4 method for epiclustDiscreteListContain,ANY,ANY,ANY [(x, i, j, ..., drop = TRUE)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/sub-epiclustDiscreteListContain-ANY-ANY-ANY-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allow subsetting of epiclustDiscreteListContain — [,epiclustDiscreteListContain,ANY,ANY,ANY-method","text":"x epiclustDiscreteListContain index 1 j index 2 ... additional arguement drop TRUE/FALSE","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/sub-epiclustDiscreteListContain-ANY-ANY-ANY-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Allow subsetting of epiclustDiscreteListContain — [,epiclustDiscreteListContain,ANY,ANY,ANY-method","text":"subset epiclustDiscreteListContain","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/sub-epiclustDiscreteListContain-ANY-ANY-ANY-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Allow subsetting of epiclustDiscreteListContain — [,epiclustDiscreteListContain,ANY,ANY,ANY-method","text":"","code":"library(GenomicRanges)  data('decorateData')  # Evaluate hierarchical clustering treeList = runOrderedClusteringGenome( simData, simLocation )  #>  Evaluating:chr20           #>   # Choose cutoffs and return clusters treeListClusters = createClusters( treeList ) #> Method:capushe"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/summary-sLEDresults-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize sLED analysis — summary,sLEDresults-method","title":"Summarize sLED analysis — summary,sLEDresults-method","text":"extract statistic p-value cluster","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/summary-sLEDresults-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize sLED analysis — summary,sLEDresults-method","text":"","code":"# S4 method for sLEDresults summary(object)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/summary-sLEDresults-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize sLED analysis — summary,sLEDresults-method","text":"object sLEDresults","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/summary-sLEDresults-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize sLED analysis — summary,sLEDresults-method","text":"data.frame","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/whichCluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Find which cluster a peak is in — whichCluster","title":"Find which cluster a peak is in — whichCluster","text":"Find cluster peak ","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/whichCluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find which cluster a peak is in — whichCluster","text":"","code":"whichCluster(treeListClusters, feature_id, id = NULL)"},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/whichCluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find which cluster a peak is in — whichCluster","text":"treeListClusters createClusters() feature_id name query feature, can also array id clustering parameter identifier.  filtering feature_id, filter id","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/whichCluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find which cluster a peak is in — whichCluster","text":"data.frame chromosome cluster","code":""},{"path":"http://gabrielhoffman.github.io/decorrelate/reference/whichCluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find which cluster a peak is in — whichCluster","text":"","code":"library(GenomicRanges)  data('decorateData')  # Evaluate hierarchical clustering treeList = runOrderedClusteringGenome( simData, simLocation )  #>  Evaluating:chr20           #>   # Choose cutoffs and return clusters treeListClusters = createClusters( treeList, method='meanClusterSize', meanClusterSize = c(50, 100) ) #> Method:meanClusterSize  # Find chromsome and cluster of peak_20 whichCluster( treeListClusters, 'peak_20') #>    id chrom feature_id cluster #> 1  50 chr20    peak_20       1 #> 2 100 chr20    peak_20       1  # Find chromsome and cluster of peak_20 with clustering parameter 50  #  corresponding to meanClusterSize  whichCluster( treeListClusters, 'peak_20', \"50\") #>   id chrom feature_id cluster #> 1 50 chr20    peak_20       1  # Search for multiple clusters whichCluster( treeListClusters, c('peak_20', 'peak_21'), \"50\") #>   id chrom feature_id cluster #> 1 50 chr20    peak_20       1 #> 2 50 chr20    peak_21       1"}]
